{
  "version": 3,
  "sources": ["../src/cli.ts", "../src/main.ts", "../src/formatter.ts", "../src/vsctm.ts", "../src/util.ts", "../src/indent.ts", "../src/regex.ts", "../src/runtimeConfig.ts", "../src/errors/formatError.ts"],
  "sourcesContent": ["import yargs from 'yargs';\nimport concat from 'concat-stream';\nimport { loadWASM } from 'vscode-oniguruma';\n\nimport { promises as fs } from 'fs';\n\nimport { hideBin } from 'yargs/helpers';\nimport { BladeFormatter } from './main';\n\nexport default async function cli() {\n  // @ts-ignore\n  const parsed = await yargs(hideBin(process.argv))\n    .usage('Usage: $0 [options] [file glob | ...]')\n    .example('$0 \"resources/views/**/*.blade.php\" --write', 'Format all files in views directory')\n    .option('check-formatted', {\n      alias: 'c',\n      type: 'boolean',\n      description: 'Only checks files are formatted or not',\n      default: false,\n    })\n    .option('write', {\n      alias: 'w',\n      type: 'boolean',\n      description: 'Write to file',\n      default: false,\n    })\n    .option('diff', {\n      alias: 'd',\n      type: 'boolean',\n      description: 'Show diffs',\n      default: false,\n    })\n    .option('end-with-newline', {\n      alias: 'e',\n      type: 'boolean',\n      description: 'End output with newline',\n      default: true,\n    })\n    .option('indent-size', {\n      alias: 'i',\n      type: 'integer',\n      description: 'Indentation size',\n      default: 4,\n    })\n    .option('wrap-line-length', {\n      alias: 'wrap',\n      type: 'integer',\n      description: 'The length of line wrap size',\n      default: 120,\n    })\n    .option('wrap-attributes', {\n      alias: 'wrap-atts',\n      type: 'string',\n      description: 'The way to wrap attributes',\n      default: 'auto',\n    })\n    .option('sort-tailwindcss-classes', {\n      alias: 'sort-classes',\n      type: 'boolean',\n      description: 'Sort tailwindcss classes',\n      default: false,\n    })\n    .option('progress', {\n      alias: 'p',\n      type: 'boolean',\n      description: 'Print progress',\n      default: false,\n    })\n    .option('stdin', {\n      type: 'boolean',\n      description: 'format code provided on <STDIN>',\n      default: false,\n    })\n    .option('config', {\n      alias: ['runtimeConfigPath'],\n      type: 'string',\n      description: 'Use this configuration, overriding .bladeformatterrc config options if present',\n      default: null,\n    })\n    .option('ignore-path', {\n      alias: ['ignoreFilePath'],\n      type: 'string',\n      description: 'Specify path of ignore file',\n      default: null,\n    })\n    .help('h')\n    .alias('h', 'help')\n    .epilog('Copyright Shuhei Hayashibara 2019');\n\n  // @ts-ignore\n  // eslint-disable-next-line\n  const wasm = await fs.readFile(require.resolve('vscode-oniguruma/release/onig.wasm'));\n  await loadWASM(wasm.buffer);\n\n  if (parsed.argv.stdin) {\n    await process.stdin.pipe(\n      concat({ encoding: 'string' }, (text: Buffer) => {\n        return new BladeFormatter(parsed.argv)\n          .format(text)\n          .then((result: string | undefined) => {\n            if (result !== undefined) {\n              process.stdout.write(result);\n            }\n          })\n          .catch((error) => {\n            process.stdout.write(`${error.toString()}\\n`);\n            process.exit(1);\n          });\n      }),\n    );\n    return;\n  }\n\n  if (parsed.argv._.length === 0) {\n    parsed.showHelp();\n    return;\n  }\n\n  const formatter = new BladeFormatter(parsed.argv, parsed.argv._);\n  await formatter.formatFromCLI();\n}\n", "import ignore from 'ignore';\n\nimport nodepath from 'path';\nimport fs from 'fs';\nimport process from 'process';\nimport chalk from 'chalk';\nimport glob from 'glob';\nimport nodeutil from 'util';\nimport _ from 'lodash';\nimport findConfig from 'find-config';\nimport Formatter from './formatter';\nimport * as util from './util';\nimport { findRuntimeConfig, readRuntimeConfig, RuntimeConfig, WrapAttributes } from './runtimeConfig';\nimport FormatError from './errors/formatError';\n\nexport interface CLIOption {\n  write?: boolean;\n  diff?: boolean;\n  checkFormatted?: boolean;\n  progress?: boolean;\n  ignoreFilePath?: string;\n  runtimeConfigPath?: string;\n}\n\nexport interface FormatterOption {\n  indentSize?: number;\n  wrapLineLength?: number;\n  wrapAttributes?: WrapAttributes;\n  endWithNewline?: boolean;\n  useTabs?: boolean;\n  sortTailwindcssClasses?: true;\n}\n\nclass BladeFormatter {\n  diffs: any;\n\n  errors: any;\n\n  formattedFiles: any;\n\n  ignoreFile: any;\n\n  options: FormatterOption & CLIOption;\n\n  outputs: any;\n\n  currentTargetPath: string;\n\n  paths: any;\n\n  targetFiles: any;\n\n  fulFillFiles: any;\n\n  static targetFiles: any;\n\n  runtimeConfigCache: RuntimeConfig;\n\n  constructor(options: FormatterOption & CLIOption = {}, paths: any = []) {\n    this.currentTargetPath = '.';\n    this.paths = paths;\n    this.options = options;\n    this.targetFiles = [];\n    this.errors = [];\n    this.diffs = [];\n    this.outputs = [];\n    this.formattedFiles = [];\n    this.ignoreFile = '';\n    this.fulFillFiles = [];\n    this.targetFiles = [];\n    this.runtimeConfigCache = {};\n  }\n\n  async format(content: any, opts = {}) {\n    const options = this.options || opts;\n    await this.readIgnoreFile(process.cwd());\n    await this.readRuntimeConfig(process.cwd());\n    return new Formatter(options).formatContent(content).catch((err) => {\n      throw new FormatError(err);\n    });\n  }\n\n  async formatFromCLI() {\n    try {\n      this.printPreamble();\n      await this.readIgnoreFile(process.cwd());\n      await this.processPaths();\n      this.printResults();\n    } catch (error) {\n      // do nothing\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  fileExists(filepath: string) {\n    return fs.promises\n      .access(filepath, fs.constants.F_OK)\n      .then(() => true)\n      .catch(() => false);\n  }\n\n  async readIgnoreFile(filePath: string) {\n    const configFilename = '.bladeignore';\n\n    let configFilePath: string | null;\n    const worakingDir = nodepath.dirname(filePath);\n\n    if (this.options.ignoreFilePath) {\n      configFilePath = this.options.ignoreFilePath;\n    } else {\n      configFilePath = findConfig(configFilename, { cwd: worakingDir });\n    }\n\n    if (!configFilePath) {\n      return;\n    }\n\n    try {\n      this.ignoreFile = (await fs.promises.readFile(configFilePath)).toString();\n    } catch (err) {\n      // do nothing\n    }\n  }\n\n  async readRuntimeConfig(filePath: string): Promise<RuntimeConfig | undefined> {\n    if (_.isEmpty(this.runtimeConfigCache)) {\n      this.options = _.merge(this.options, this.runtimeConfigCache);\n    }\n\n    let configFile: string | null;\n\n    if (this.options.runtimeConfigPath) {\n      configFile = this.options.runtimeConfigPath;\n    } else {\n      configFile = findRuntimeConfig(filePath);\n    }\n\n    if (_.isNull(configFile)) {\n      return;\n    }\n\n    try {\n      const options = await readRuntimeConfig(configFile);\n      this.options = _.merge(this.options, options);\n      this.runtimeConfigCache = this.options;\n    } catch (error: any) {\n      if (error instanceof SyntaxError) {\n        process.stdout.write(chalk.red.bold('\\nBlade Formatter JSON Syntax Error: \\n\\n'));\n        process.stdout.write(nodeutil.format(error));\n        process.exit(1);\n      }\n\n      process.stdout.write(chalk.red.bold(`\\nBlade Formatter Config Error: ${nodepath.basename(configFile)}\\n\\n`));\n      process.stdout.write(`\\`${error.errors[0].instancePath.replace('/', '')}\\` ${error.errors[0].message}\\n\\n`);\n      if (error.errors[0].params?.allowedValues) {\n        console.log(error.errors[0].params?.allowedValues);\n      }\n      process.exit(1);\n    }\n  }\n\n  async processPaths() {\n    await Promise.all(_.map(this.paths, async (path: any) => this.processPath(path)));\n  }\n\n  async processPath(path: any) {\n    await BladeFormatter.globFiles(path)\n      .then((paths: any) => _.map(paths, (target: any) => nodepath.relative('.', target)))\n      .then((paths) => this.filterFiles(paths))\n      .then(this.fulFillFiles)\n      .then((paths) => this.formatFiles(paths));\n  }\n\n  static globFiles(path: any) {\n    return new Promise((resolve, reject) => {\n      glob(path, (error: any, matches: any) => (error ? reject(error) : resolve(matches)));\n    });\n  }\n\n  async filterFiles(paths: any) {\n    if (this.ignoreFile === '') {\n      return paths;\n    }\n\n    const REGEX_FILES_NOT_IN_CURRENT_DIR = /^\\.\\.*/;\n    const filesOutsideTargetDir = _.filter(paths, (path: any) =>\n      REGEX_FILES_NOT_IN_CURRENT_DIR.test(nodepath.relative('.', path)),\n    );\n\n    const filesUnderTargetDir = _.xor(paths, filesOutsideTargetDir);\n\n    const filteredFiles = ignore().add(this.ignoreFile).filter(filesUnderTargetDir);\n\n    return _.concat(filesOutsideTargetDir, filteredFiles);\n  }\n\n  static fulFillFiles(paths: any) {\n    this.targetFiles.push(paths);\n\n    return Promise.resolve(paths);\n  }\n\n  async formatFiles(paths: any) {\n    await Promise.all(_.map(paths, async (path: any) => this.formatFile(path)));\n  }\n\n  async formatFile(path: any) {\n    await this.readRuntimeConfig(path);\n\n    await util\n      .readFile(path)\n      .then((data: any) => Promise.resolve(data.toString('utf-8')))\n      .then((content) => new Formatter(this.options).formatContent(content))\n      .then((formatted) => this.checkFormatted(path, formatted))\n      .then((formatted) => this.writeToFile(path, formatted))\n      .catch((err) => {\n        this.handleError(path, err);\n      });\n  }\n\n  async checkFormatted(path: any, formatted: any) {\n    this.printFormattedOutput(path, formatted);\n\n    const originalContent = fs.readFileSync(path, 'utf-8');\n\n    const originalLines = util.splitByLines(originalContent);\n    const formattedLines = util.splitByLines(formatted);\n\n    const diff = util.generateDiff(path, originalLines, formattedLines);\n    this.diffs.push(diff);\n    this.outputs.push(formatted);\n\n    if (diff.length > 0) {\n      if (this.options.progress || this.options.write) {\n        process.stdout.write(chalk.green('F'));\n      }\n\n      if (this.options.checkFormatted) {\n        process.stdout.write(`${path}\\n`);\n        process.exitCode = 1;\n      }\n\n      this.formattedFiles.push(path);\n    }\n\n    if (diff.length === 0) {\n      if (this.options.progress || this.options.write) {\n        process.stdout.write(chalk.green('.'));\n      }\n    }\n\n    return Promise.resolve(formatted);\n  }\n\n  printFormattedOutput(path: any, formatted: any) {\n    if (this.options.write || this.options.checkFormatted) {\n      return;\n    }\n\n    process.stdout.write(`${formatted}`);\n\n    const isLastFile = _.last(this.paths) === path || _.last(this.targetFiles) === path;\n\n    if (isLastFile) {\n      return;\n    }\n\n    // write divider to stdout\n    if (this.paths.length > 1 || this.targetFiles.length > 1) {\n      process.stdout.write('\\n');\n    }\n  }\n\n  writeToFile(path: any, content: any) {\n    if (!this.options.write) {\n      return;\n    }\n\n    if (this.options.checkFormatted) {\n      return;\n    }\n\n    // preserve original content\n    if (content.length === 0 || _.isNull(content) || _.isEmpty(content)) {\n      return;\n    }\n\n    fs.writeFile(path, content, (err: any) => {\n      if (err) {\n        process.stdout.write(`${chalk.red(err.message)}\\n`);\n        process.exit(1);\n      }\n    });\n  }\n\n  handleError(path: any, error: any) {\n    if (this.options.progress || this.options.write) {\n      process.stdout.write(chalk.red('E'));\n    }\n\n    process.exitCode = 1;\n    this.errors.push({ path, message: error.message, error });\n  }\n\n  printPreamble() {\n    if (this.options.checkFormatted) {\n      process.stdout.write('Check formatting... \\n');\n    }\n  }\n\n  async printResults() {\n    this.printDescription();\n    this.printDifferences();\n    this.printFormattedFiles();\n    this.printErrors();\n  }\n\n  printDescription() {\n    if (!this.options.write) {\n      return;\n    }\n\n    const returnLine = '\\n\\n';\n    process.stdout.write(returnLine);\n    process.stdout.write(chalk.bold.green('Fixed: F\\n'));\n    process.stdout.write(chalk.bold.red('Errors: E\\n'));\n    process.stdout.write(chalk.bold('Not Changed: ') + chalk.bold.green('.\\n'));\n  }\n\n  printFormattedFiles() {\n    if (this.formattedFiles.length === 0) {\n      if (this.options.checkFormatted) {\n        process.stdout.write(chalk.bold('\\nAll matched files are formatted! \\n'));\n      }\n\n      return;\n    }\n\n    if (!this.options.write) {\n      if (this.options.checkFormatted) {\n        process.stdout.write(\n          '\\nAbove file(s) are formattable. Forgot to run formatter? ' +\n            `Use ${chalk.bold('--write')} option to overwrite.\\n`,\n        );\n      }\n\n      return;\n    }\n\n    process.stdout.write(chalk.bold('\\nFormatted Files: \\n'));\n    _.each(this.formattedFiles, (path: any) => process.stdout.write(`${chalk.bold(path)}\\n`));\n  }\n\n  printDifferences() {\n    if (!this.options.diff) {\n      return;\n    }\n\n    process.stdout.write(chalk.bold('\\nDifferences: \\n\\n'));\n\n    if (_.filter(this.diffs, (diff: any) => diff.length > 0).length === 0) {\n      process.stdout.write(chalk('No changes found. \\n\\n'));\n\n      return;\n    }\n\n    _.each(this.diffs, (diff: any) => util.printDiffs(diff));\n  }\n\n  printErrors() {\n    if (_.isEmpty(this.errors)) {\n      return;\n    }\n\n    process.stdout.write(chalk.red.bold('\\nErrors: \\n\\n'));\n\n    _.each(this.errors, (error: any) => process.stdout.write(`${nodeutil.format(error)}\\n`));\n  }\n}\n\nexport { BladeFormatter, Formatter };\n", "/* eslint-disable class-methods-use-this */\n\nimport os from 'os';\nimport beautify, { JSBeautifyOptions } from 'js-beautify';\nimport _ from 'lodash';\nimport * as vscodeTmModule from 'vscode-textmate';\nimport detectIndent from 'detect-indent';\nimport Aigle from 'aigle';\nimport xregexp from 'xregexp';\nimport { sortClasses } from '@shufo/tailwindcss-class-sorter';\nimport { FormatterOption, CLIOption } from './main';\nimport * as vsctm from './vsctm';\nimport * as util from './util';\nimport {\n  indentStartTokens,\n  indentEndTokens,\n  indentElseTokens,\n  indentStartOrElseTokens,\n  tokenForIndentStartOrElseTokens,\n  hasStartAndEndToken,\n  phpKeywordStartTokens,\n  phpKeywordEndTokens,\n  indentStartAndEndTokens,\n  inlineFunctionTokens,\n  optionalStartWithoutEndTokens,\n  conditionalTokens,\n  directivePrefix,\n  indentStartTokensWithoutPrefix,\n  unbalancedStartTokens,\n  cssAtRuleTokens,\n} from './indent';\nimport { nestedParenthesisRegex } from './regex';\n\nexport default class Formatter {\n  argumentCheck: any;\n\n  bladeBraces: any;\n\n  bladeComments: any;\n\n  bladeDirectives: any;\n\n  htmlAttributes: Array<string>;\n\n  currentIndentLevel: number;\n\n  diffs: any;\n\n  indentCharacter: any;\n\n  indentSize: any;\n\n  inlineDirectives: any;\n\n  conditions: any;\n\n  inlinePhpDirectives: any;\n\n  isInsideCommentBlock: any;\n\n  oniguruma: any;\n\n  options: FormatterOption & CLIOption;\n\n  rawBladeBraces: any;\n\n  ignoredLines: any;\n\n  curlyBracesWithJSs: any;\n\n  rawBlocks: any;\n\n  rawPhpTags: any;\n\n  rawPropsBlocks: any;\n\n  result: any;\n\n  scripts: any;\n\n  xData: any;\n\n  xInit: any;\n\n  htmlTags: Array<string>;\n\n  shouldBeIndent: any;\n\n  stack: any;\n\n  templatingStrings: any;\n\n  stringLiteralInPhp: Array<string>;\n\n  shorthandBindings: Array<string>;\n\n  componentAttributes: Array<string>;\n\n  customDirectives: Array<string>;\n\n  directivesInScript: Array<string>;\n\n  unbalancedDirectives: Array<string>;\n\n  escapedBladeDirectives: Array<string>;\n\n  vsctm: any;\n\n  wrapAttributes: any;\n\n  wrapLineLength: any;\n\n  constructor(options: any) {\n    this.options = options;\n    this.vsctm = util.optional(this.options).vsctm || vscodeTmModule;\n    this.oniguruma = util.optional(this.options).oniguruma;\n    this.indentCharacter = util.optional(this.options).useTabs ? '\\t' : ' ';\n    this.indentSize = util.optional(this.options).indentSize || 4;\n    this.wrapLineLength = util.optional(this.options).wrapLineLength || 120;\n    this.wrapAttributes = util.optional(this.options).wrapAttributes || 'auto';\n    this.currentIndentLevel = 0;\n    this.shouldBeIndent = false;\n    this.isInsideCommentBlock = false;\n    this.stack = [];\n    this.ignoredLines = [];\n    this.curlyBracesWithJSs = [];\n    this.rawBlocks = [];\n    this.rawPhpTags = [];\n    this.inlineDirectives = [];\n    this.conditions = [];\n    this.inlinePhpDirectives = [];\n    this.rawPropsBlocks = [];\n    this.bladeDirectives = [];\n    this.bladeComments = [];\n    this.bladeBraces = [];\n    this.rawBladeBraces = [];\n    this.scripts = [];\n    this.htmlAttributes = [];\n    this.xData = [];\n    this.xInit = [];\n    this.htmlTags = [];\n    this.templatingStrings = [];\n    this.stringLiteralInPhp = [];\n    this.shorthandBindings = [];\n    this.componentAttributes = [];\n    this.customDirectives = [];\n    this.directivesInScript = [];\n    this.unbalancedDirectives = [];\n    this.escapedBladeDirectives = [];\n    this.result = [];\n    this.diffs = [];\n  }\n\n  formatContent(content: any) {\n    return new Promise((resolve) => resolve(content))\n      .then((target) => this.preserveIgnoredLines(target))\n      .then((target) => this.preserveCurlyBraceForJS(target))\n      .then((target) => this.preserveRawPhpTags(target))\n      .then((target) => this.preserveEscapedBladeDirective(target))\n      .then((target) => util.formatAsPhp(target))\n      .then((target) => this.preserveBladeComment(target))\n      .then((target) => this.preserveBladeBrace(target))\n      .then((target) => this.preserveRawBladeBrace(target))\n      .then((target) => this.preserveConditions(target))\n      .then((target) => this.preserveInlineDirective(target))\n      .then((target) => this.preserveInlinePhpDirective(target))\n      .then((target) => this.preserveBladeDirectivesInScripts(target))\n      .then((target) => this.preserveCustomDirective(target))\n      .then((target) => this.preserveUnbalancedDirective(target))\n      .then((target) => this.breakLineBeforeAndAfterDirective(target))\n      .then(async (target) => {\n        this.bladeDirectives = await this.formatPreservedBladeDirectives(this.bladeDirectives);\n        return target;\n      })\n      .then((target) => this.preserveScripts(target))\n      .then((target) => this.sortTailwindcssClasses(target))\n      .then((target) => this.formatXInit(target))\n      .then((target) => this.formatXData(target))\n      .then((target) => this.preserveComponentAttribute(target))\n      .then((target) => this.preserveShorthandBinding(target))\n      .then((target) => this.preserveHtmlAttributes(target))\n      .then((target) => this.preserveHtmlTags(target))\n      .then((target) => this.formatAsHtml(target))\n      .then((target) => this.formatAsBlade(target))\n      .then((target) => this.restoreHtmlTags(target))\n      .then((target) => this.restoreHtmlAttributes(target))\n      .then((target) => this.restoreShorthandBinding(target))\n      .then((target) => this.restoreComponentAttribute(target))\n      .then((target) => this.restoreXData(target))\n      .then((target) => this.restoreXInit(target))\n      .then((target) => this.restoreScripts(target))\n      .then((target) => this.restoreUnbalancedDirective(target))\n      .then((target) => this.restoreCustomDirective(target))\n      .then((target) => this.restoreBladeDirectivesInScripts(target))\n      .then((target) => this.restoreInlinePhpDirective(target))\n      .then((target) => this.restoreInlineDirective(target))\n      .then((target) => this.restoreConditions(target))\n      .then((target) => this.restoreRawBladeBrace(target))\n      .then((target) => this.restoreBladeBrace(target))\n      .then((target) => this.restoreBladeComment(target))\n      .then((target) => this.restoreEscapedBladeDirective(target))\n      .then((target) => this.restoreRawPhpTags(target))\n      .then((target) => this.restoreCurlyBraceForJS(target))\n      .then((target) => this.restoreIgnoredLines(target))\n      .then((formattedResult) => util.checkResult(formattedResult));\n  }\n\n  formatAsHtml(data: any) {\n    const options = {\n      indent_size: util.optional(this.options).indentSize || 4,\n      wrap_line_length: util.optional(this.options).wrapLineLength || 120,\n      wrap_attributes: util.optional(this.options).wrapAttributes || 'auto',\n      end_with_newline: util.optional(this.options).endWithNewline || true,\n      css: {\n        end_with_newline: false,\n      },\n    };\n\n    const promise = new Promise((resolve) => resolve(data))\n      .then((content) => this.preservePhpBlock(content))\n      .then((content) => util.preserveDirectives(content))\n      .then((preserved) => beautify.html_beautify(preserved, options))\n      .then((content) => util.revertDirectives(content))\n      .then((content) => this.restorePhpBlock(content));\n\n    return Promise.resolve(promise);\n  }\n\n  async sortTailwindcssClasses(content: any) {\n    if (!this.options.sortTailwindcssClasses) {\n      return content;\n    }\n\n    return _.replace(content, /(?<=\\s+(?!:)class\\s*=\\s*([\\\"\\']))(.*?)(?=\\1)/gis, (_match, p1, p2) => {\n      if (_.isEmpty(p2)) {\n        return p2;\n      }\n\n      return sortClasses(p2);\n    });\n  }\n\n  async preserveIgnoredLines(content: any) {\n    return (\n      _.chain(content)\n        // ignore entire file\n        .replace(\n          /(^(?<!.+)^{{--\\s*blade-formatter-disable\\s*--}}.*?)([\\r\\n]*)$(?![\\r\\n])/gis,\n          (_match: any, p1: any, p2: any) => {\n            return this.storeIgnoredLines(`${p1}${p2.replace(/^\\n/, '')}`);\n          },\n        )\n        // range ignore\n        .replace(\n          /(?:({{--\\s*?blade-formatter-disable\\s*?--}}|<!--\\s*?prettier-ignore-start\\s*?-->|{{--\\s*?prettier-ignore-start\\s*?--}})).*?(?:({{--\\s*?blade-formatter-enable\\s*?--}}|<!--\\s*?prettier-ignore-end\\s*?-->|{{--\\s*?prettier-ignore-end\\s*?--}}))/gis,\n          (match: any) => this.storeIgnoredLines(match),\n        )\n        // line ignore\n        .replace(\n          /(?:{{--\\s*?blade-formatter-disable-next-line\\s*?--}}|{{--\\s*?prettier-ignore\\s*?--}}|<!--\\s*?prettier-ignore\\s*?-->)[\\r\\n]+[^\\r\\n]+/gis,\n          (match: any) => this.storeIgnoredLines(match),\n        )\n        .value()\n    );\n  }\n\n  async preserveCurlyBraceForJS(content: any) {\n    return _.replace(content, /@{{(.*?)}}/gs, (match: any, p1: any) => this.storeCurlyBraceForJS(p1));\n  }\n\n  async preservePhpBlock(content: any) {\n    return this.preserveRawPhpBlock(content);\n  }\n\n  async preservePropsBlock(content: any) {\n    return _.replace(content, /@props\\(((?:[^\\\\(\\\\)]|\\([^\\\\(\\\\)]*\\))*)\\)/gs, (match: any, p1: any) =>\n      this.storeRawPropsBlock(p1),\n    );\n  }\n\n  async preserveRawPhpBlock(content: any) {\n    return _.replace(content, /(?<!@)@php(.*?)@endphp/gs, (match: any, p1: any) => this.storeRawBlock(p1));\n  }\n\n  async preserveHtmlTags(content: string) {\n    const contentUnformatted = ['textarea', 'pre'];\n\n    return _.replace(\n      content,\n      new RegExp(`<(${contentUnformatted.join('|')})\\\\s{0,1}.*?>.*?<\\\\/(${contentUnformatted.join('|')})>`, 'gis'),\n      (match: string) => this.storeHtmlTag(match),\n    );\n  }\n\n  /**\n   * preserve custom directives\n   * @param content\n   * @returns\n   */\n  preserveCustomDirective(content: string) {\n    const negativeLookAhead = [\n      ..._.without(indentStartTokens, '@unless'),\n      ...indentEndTokens,\n      ...indentElseTokens,\n      ...['@unless\\\\(.*?\\\\)'],\n    ].join('|');\n\n    const inlineNegativeLookAhead = [\n      ..._.without(indentStartTokens, '@unless'),\n      ...indentEndTokens,\n      ...indentElseTokens,\n      ...inlineFunctionTokens,\n      ...phpKeywordStartTokens,\n      ...['@unless[a-z]*\\\\(.*?\\\\)'],\n      ...unbalancedStartTokens,\n      ...cssAtRuleTokens,\n    ].join('|');\n\n    const inlineRegex = new RegExp(\n      `(?!(${inlineNegativeLookAhead}))(@([a-zA-Z1-9_\\\\-]+))(?!.*?@end\\\\3)${nestedParenthesisRegex}.*?(?<!@end\\\\5)`,\n      'gis',\n    );\n\n    const regex = new RegExp(\n      `(?!(${negativeLookAhead}))(@(unless)*([a-zA-Z1-9_\\\\-]+))(?!.*?\\\\2)(\\\\s|\\\\(.*?\\\\))+(.*?)(@end\\\\4)`,\n      'gis',\n    );\n\n    let formatted: string;\n\n    // preserve inline directives\n    formatted = _.replace(content, inlineRegex, (match: string) => {\n      return this.storeInlineCustomDirective(match);\n    });\n\n    // preserve begin~else~end directives\n    formatted = _.replace(\n      formatted,\n      regex,\n      (match: string, p1: string, p2: string, p3: string, p4: string, p5: string, p6: string, p7: string) => {\n        if (indentStartTokens.includes(p2)) {\n          return match;\n        }\n\n        let result: string = match;\n\n        // begin directive\n        result = _.replace(result, new RegExp(`${p2}(${nestedParenthesisRegex})*`, 'gim'), (beginStr: string) => {\n          return this.storeBeginCustomDirective(beginStr);\n        });\n        // end directive\n        result = _.replace(result, p7, this.storeEndCustomDirective(p7));\n        // else directive\n        result = _.replace(result, new RegExp(`@else${p4}(${nestedParenthesisRegex})*`, 'gim'), (elseStr: string) => {\n          return this.storeElseCustomDirective(elseStr);\n        });\n\n        return result;\n      },\n    );\n\n    // replace directives recursively\n    if (regex.test(formatted)) {\n      formatted = this.preserveCustomDirective(formatted);\n    }\n\n    return formatted;\n  }\n\n  preserveInlineDirective(content: string): string {\n    // preserve inline directives inside html tag\n    const regex = new RegExp(\n      `(?<=<[\\\\w\\\\-\\\\_]+?[^>]*?)${directivePrefix}(${indentStartTokensWithoutPrefix.join(\n        '|',\n      )})(\\\\s*?)(\\\\(.*?\\\\))(.*?)(@end\\\\1|@endif)(?=.*?/*>)`,\n      'gims',\n    );\n    const replaced = _.replace(\n      content,\n      regex,\n      (_match: string, p1: string, p2: string, p3: string, p4: string, p5: string) => {\n        return `${this.storeInlineDirective(\n          `${directivePrefix}${p1.trim()}${p2}${p3.trim()} ${p4.trim()} ${p5.trim()}`,\n        )}`;\n      },\n    );\n\n    if (regex.test(replaced)) {\n      return this.preserveInlineDirective(replaced);\n    }\n\n    return replaced;\n  }\n\n  async preserveInlinePhpDirective(content: any) {\n    return _.replace(\n      content,\n      // eslint-disable-next-line max-len\n      new RegExp(`(?!\\\\/\\\\*.*?\\\\*\\\\/)(${inlineFunctionTokens.join('|')})(\\\\s*?)${nestedParenthesisRegex}`, 'gmsi'),\n      (match: any) => this.storeInlinePhpDirective(match),\n    );\n  }\n\n  preserveBladeDirectivesInScripts(content: any) {\n    return _.replace(content, /(?<=<script[^>]*?(?<!=)>)(.*?)(?=<\\/script>)/gis, (match: string) => {\n      const targetTokens = [...indentStartTokens, ...inlineFunctionTokens];\n      if (new RegExp(targetTokens.join('|'), 'gmi').test(match) === false) {\n        return match.trim();\n      }\n\n      const inlineFunctionDirectives = inlineFunctionTokens.join('|');\n      const inlineFunctionRegex = new RegExp(\n        // eslint-disable-next-line max-len\n        `(?!\\\\/\\\\*.*?\\\\*\\\\/)(${inlineFunctionDirectives})(\\\\s*?)${nestedParenthesisRegex}`,\n        'gmi',\n      );\n      const endTokens = _.chain(indentEndTokens).without('@endphp');\n\n      let formatted: string = match;\n\n      formatted = _.replace(formatted, inlineFunctionRegex, (matched: any) =>\n        this.storeBladeDirective(util.formatRawStringAsPhp(matched)),\n      );\n\n      formatted = _.replace(\n        formatted,\n        new RegExp(`(${indentStartTokens.join('|')})\\\\s*?${nestedParenthesisRegex}`, 'gis'),\n        (matched) => {\n          return `if ( /*${this.storeBladeDirectiveInScript(matched)}*/ ) {`;\n        },\n      );\n\n      formatted = _.replace(\n        formatted,\n        new RegExp(`(${[...indentElseTokens, ...indentStartOrElseTokens].join('|')})(?!\\\\w+?\\\\s*?\\\\(.*?\\\\))`, 'gis'),\n        (matched) => {\n          return `/***script_placeholder***/} /* ${this.storeBladeDirectiveInScript(matched)} */ {`;\n        },\n      );\n\n      formatted = _.replace(formatted, new RegExp(`(${endTokens.join('|')})`, 'gis'), (matched) => {\n        return `/***script_placeholder***/} /*${this.storeBladeDirectiveInScript(matched)}*/`;\n      });\n\n      formatted = _.replace(formatted, /(?<!@)@php(.*?)@endphp/gis, (_matched: any, p1: any) => this.storeRawBlock(p1));\n\n      // custom directive\n      formatted = this.preserveCustomDirectiveInScript(formatted);\n\n      return formatted;\n    });\n  }\n\n  /**\n   *\n   * @param content string between <script>~</script>\n   * @returns string\n   */\n  preserveCustomDirectiveInScript(content: string): string {\n    const negativeLookAhead = [\n      ..._.without(indentStartTokens, '@unless'),\n      ...indentEndTokens,\n      ...indentElseTokens,\n      ...['@unless\\\\(.*?\\\\)'],\n    ].join('|');\n\n    const inlineNegativeLookAhead = [\n      ..._.without(indentStartTokens, '@unless'),\n      ...indentEndTokens,\n      ...indentElseTokens,\n      ...inlineFunctionTokens,\n      ...phpKeywordStartTokens,\n      ...['@unless[a-z]*\\\\(.*?\\\\)'],\n      ...unbalancedStartTokens,\n    ].join('|');\n\n    const inlineRegex = new RegExp(\n      `(?!(${inlineNegativeLookAhead}))(@([a-zA-Z1-9_\\\\-]+))(?!.*?@end\\\\3)${nestedParenthesisRegex}.*?(?<!@end\\\\5)`,\n      'gis',\n    );\n\n    const regex = new RegExp(\n      `(?!(${negativeLookAhead}))(@(unless)*([a-zA-Z1-9_\\\\-]+))(?!.*?\\\\2)(\\\\s|\\\\(.*?\\\\))+(.*?)(@end\\\\4)`,\n      'gis',\n    );\n\n    let formatted: string;\n\n    // preserve inline directives\n    formatted = _.replace(content, inlineRegex, (match: string) => {\n      return this.storeInlineCustomDirective(match);\n    });\n\n    // preserve begin~else~end directives\n    formatted = _.replace(\n      formatted,\n      regex,\n      (match: string, p1: string, p2: string, p3: string, p4: string, p5: string, p6: string, p7: string) => {\n        if (indentStartTokens.includes(p2)) {\n          return match;\n        }\n\n        let result: string = match;\n\n        result = _.replace(result, new RegExp(`${p2}(${nestedParenthesisRegex})*`, 'gim'), (beginStr: string) => {\n          return `if ( /*${this.storeBladeDirectiveInScript(beginStr)}*/ ) {`;\n        });\n\n        result = _.replace(result, new RegExp(`@else${p4}(${nestedParenthesisRegex})*`, 'gim'), (elseStr: string) => {\n          return `/***script_placeholder***/} /* ${this.storeBladeDirectiveInScript(elseStr)} */ {`;\n        });\n        result = _.replace(result, p7, (endStr: string) => {\n          return `/***script_placeholder***/} /*${this.storeBladeDirectiveInScript(endStr)}*/`;\n        });\n\n        return result;\n      },\n    );\n\n    // replace directives recursively\n    if (regex.test(formatted)) {\n      formatted = this.preserveCustomDirectiveInScript(formatted);\n    }\n\n    return formatted;\n  }\n\n  /**\n   * Recursively insert line break before and after directives\n   * @param content string\n   * @returns\n   */\n  breakLineBeforeAndAfterDirective(content: string): string {\n    // handle directive around html tags\n    // eslint-disable-next-line\n    content = _.replace(\n      content,\n      new RegExp(\n        `(?<=<.*?(?<!=)>)(${_.without(indentStartTokens, '@php').join(\n          '|',\n        )})(\\\\s*)${nestedParenthesisRegex}.*?(?=<.*?>)`,\n        'gmis',\n      ),\n      (match) => {\n        return `\\n${match.trim()}\\n`;\n      },\n    );\n\n    // eslint-disable-next-line\n    content = _.replace(\n      content,\n      new RegExp(`(?<=<.*?(?<!=)>).*?(${_.without(indentEndTokens, '@endphp').join('|')})(?=<.*?>)`, 'gmis'),\n      (match) => {\n        return `\\n${match.trim()}\\n`;\n      },\n    );\n\n    const unbalancedConditions = ['@case', ...indentElseTokens];\n\n    // eslint-disable-next-line\n    content = _.replace(\n      content,\n      new RegExp(`(\\\\s*?)(${unbalancedConditions.join('|')})(\\\\s*?)${nestedParenthesisRegex}(\\\\s*)`, 'gmi'),\n      (match) => {\n        return `\\n${match.trim()}\\n`;\n        // handle else directive\n      },\n    );\n\n    // eslint-disable-next-line\n    content = _.replace(\n      content,\n      new RegExp(`\\\\s*?(?!(${_.without(indentElseTokens, '@else').join('|')}))@else\\\\s+`, 'gim'),\n      (match) => {\n        return `\\n${match.trim()}\\n`;\n        // handle case directive\n      },\n    );\n\n    // eslint-disable-next-line\n    content = _.replace(content, /@case\\S*?\\s*?@case/gim, (match) => {\n      // handle unbalanced echos\n      return `${match.replace('\\n', '')}`;\n    });\n\n    const unbalancedEchos = ['@break'];\n\n    _.forEach(unbalancedEchos, (directive) => {\n      // eslint-disable-next-line\n      content = _.replace(content, new RegExp(`(\\\\s*?)${directive}\\\\s+`, 'gmi'), (match) => {\n        return `\\n${match.trim()}\\n\\n`;\n      });\n    });\n\n    // other directives\n    _.forEach(['@default'], (directive) => {\n      // eslint-disable-next-line\n      content = _.replace(content, new RegExp(`(\\\\s*?)${directive}\\\\s*`, 'gmi'), (match) => {\n        return `\\n\\n${match.trim()}\\n`;\n      });\n    });\n\n    // add line break around balanced directives\n    const directives = _.chain(indentStartTokens)\n      .map((x: any) => _.replace(x, /@/, ''))\n      .value();\n\n    _.forEach(directives, (directive: any) => {\n      try {\n        const recursivelyMatched = xregexp.matchRecursive(content, `\\\\@${directive}`, `\\\\@end${directive}`, 'gmi', {\n          valueNames: [null, 'left', 'match', 'right'],\n        });\n\n        if (_.isEmpty(recursivelyMatched)) {\n          return;\n        }\n\n        // eslint-disable-next-line\n        for (const matched of recursivelyMatched) {\n          if (matched.name === 'match') {\n            if (new RegExp(indentStartTokens.join('|')).test(matched.value)) {\n              // eslint-disable-next-line\n              content = _.replace(\n                content,\n                matched.value,\n                this.breakLineBeforeAndAfterDirective(util.escapeReplacementString(matched.value)),\n              );\n            }\n\n            const innerRegex = new RegExp(`^(\\\\s*?)${nestedParenthesisRegex}(.*)`, 'gmis');\n\n            const replaced = _.replace(\n              `${matched.value}`,\n              innerRegex,\n              (_match: string, p1: string, p2: string, p3: string) => {\n                if (p3.trim() === '') {\n                  return `${p1}(${p2.trim()})\\n${p3.trim()}`;\n                }\n\n                return `${p1}(${p2.trim()})\\n${p3.trim()}\\n`;\n              },\n            );\n\n            // eslint-disable-next-line\n            content = _.replace(content, matched.value, util.escapeReplacementString(replaced));\n          }\n        }\n      } catch (error) {\n        // do nothing to ignore unmatched directive pair\n      }\n    });\n\n    return content;\n  }\n\n  async preserveEscapedBladeDirective(content: string) {\n    return _.replace(content, /@@\\w*/gim, (match: string) => this.storeEscapedBladeDirective(match));\n  }\n\n  async preserveBladeComment(content: any) {\n    return _.replace(content, /\\{\\{--(.*?)--\\}\\}/gs, (_match: any, p1: any) => this.storeBladeComment(p1));\n  }\n\n  async preserveBladeBrace(content: any) {\n    return _.replace(content, /\\{\\{(.*?)\\}\\}/gs, (_match: any, p1: any) => this.storeBladeBrace(p1, p1.length));\n  }\n\n  async preserveRawBladeBrace(content: any) {\n    return _.replace(content, /\\{!!(.*?)!!\\}/gs, (_match: any, p1: any) => this.storeRawBladeBrace(p1));\n  }\n\n  async preserveConditions(content: any) {\n    const regex = new RegExp(\n      `(${conditionalTokens.join(\n        '|',\n        // eslint-disable-next-line max-len\n      )})(\\\\s*?)${nestedParenthesisRegex}`,\n      'gi',\n    );\n    return _.replace(\n      content,\n      regex,\n      (match: any, p1: any, p2: any, p3: any) => `${p1}${p2}(${this.storeConditions(p3)})`,\n    );\n  }\n\n  /**\n   * preserve unbalanced directive like @hasSection\n   */\n  preserveUnbalancedDirective(content: any) {\n    const regex = new RegExp(`((${unbalancedStartTokens.join('|')})(?!.*?\\\\2)(?:\\\\s|\\\\(.*?\\\\)))+(?=.*?@endif)`, 'gis');\n\n    let replaced: string = _.replace(content, regex, (_match: string, p1: string) => {\n      return `${this.storeUnbalancedDirective(p1)}`;\n    });\n\n    if (regex.test(replaced)) {\n      replaced = this.preserveUnbalancedDirective(replaced);\n    }\n\n    return replaced;\n  }\n\n  async preserveRawPhpTags(content: any) {\n    return _.replace(content, /<\\?php(.*?)\\?>/gms, (match: any) => this.storeRawPhpTags(match));\n  }\n\n  async preserveScripts(content: any) {\n    return _.replace(content, /<script.*?>.*?<\\/script>/gis, (match: any) => this.storeScripts(match));\n  }\n\n  async preserveHtmlAttributes(content: any) {\n    return _.replace(\n      content,\n      /(?<=<[\\w]*?[\\s].*?)[\\w\\-\\_\\:]+?=([\"']).*?(?<!\\\\)\\1(?=.*?(?<!=)>)/gms,\n      (match: string) => `${this.storeHtmlAttribute(match)}`,\n    );\n  }\n\n  async preserveShorthandBinding(content: string) {\n    return _.replace(\n      content,\n      /(?<=<(?!livewire:)[^<]*?(\\s|x-bind)):{1}(?<!=>)[\\w\\-_.]*?=([\"'])(?!=>)[^]*?\\2(?=[^>]*?\\/*?>)/gim,\n      (match: any) => `${this.storeShorthandBinding(match)}`,\n    );\n  }\n\n  async preserveComponentAttribute(content: string) {\n    return _.replace(\n      content,\n      /(?<=<(x-|livewire:)[^<]*?\\s):{1,2}(?<!=>)[\\w\\-_.]*?=([\"'])(?!=>)[^]*?\\2(?=[^>]*?\\/*?>)/gim,\n      (match: any) => `${this.storeComponentAttribute(match)}`,\n    );\n  }\n\n  async formatXData(content: any) {\n    return _.replace(\n      content,\n      /(\\s*)x-data=\"(.*?)\"(\\s*)/gs,\n      (_match: any, p1: any, p2: any, p3: any) => `${p1}x-data=\"${this.storeXData(p2)}\"${p3}`,\n    );\n  }\n\n  async formatXInit(content: any) {\n    return _.replace(\n      content,\n      /(\\s*)x-init=\"(.*?)\"(\\s*)/gs,\n      (_match: any, p1: any, p2: any, p3: any) => `${p1}x-init=\"${this.storeXInit(p2)}\"${p3}`,\n    );\n  }\n\n  preserveStringLiteralInPhp(content: any) {\n    return _.replace(content, /['\"].*?['\"]/gms, (match: string) => {\n      return `${this.storeStringLiteralInPhp(match)}`;\n    });\n  }\n\n  storeIgnoredLines(value: any) {\n    return this.getIgnoredLinePlaceholder(this.ignoredLines.push(value) - 1);\n  }\n\n  storeCurlyBraceForJS(value: any) {\n    return this.getCurlyBraceForJSPlaceholder(this.curlyBracesWithJSs.push(value) - 1);\n  }\n\n  storeRawBlock(value: any) {\n    return this.getRawPlaceholder(this.rawBlocks.push(value) - 1);\n  }\n\n  storeInlineDirective(value: any) {\n    return this.getInlinePlaceholder(this.inlineDirectives.push(value) - 1, value.length);\n  }\n\n  storeConditions(value: any) {\n    return this.getConditionPlaceholder(this.conditions.push(value) - 1);\n  }\n\n  storeInlinePhpDirective(value: any) {\n    return this.getInlinePhpPlaceholder(this.inlinePhpDirectives.push(value) - 1);\n  }\n\n  storeRawPropsBlock(value: any) {\n    return this.getRawPropsPlaceholder(this.rawPropsBlocks.push(value) - 1);\n  }\n\n  storeBladeDirective(value: any) {\n    return this.getBladeDirectivePlaceholder(this.bladeDirectives.push(value) - 1);\n  }\n\n  storeEscapedBladeDirective(value: string) {\n    return this.getEscapedBladeDirectivePlaceholder((this.escapedBladeDirectives.push(value) - 1).toString());\n  }\n\n  storeBladeComment(value: any) {\n    return this.getBladeCommentPlaceholder(this.bladeComments.push(value) - 1);\n  }\n\n  storeHtmlTag(value: string) {\n    return this.getHtmlTagPlaceholder((this.htmlTags.push(value) - 1).toString());\n  }\n\n  storeInlineCustomDirective(value: string) {\n    return this.getInlineCustomDirectivePlaceholder((this.customDirectives.push(value) - 1).toString());\n  }\n\n  storeBeginCustomDirective(value: string) {\n    return this.getBeginCustomDirectivePlaceholder((this.customDirectives.push(value) - 1).toString());\n  }\n\n  storeElseCustomDirective(value: string) {\n    return this.getElseCustomDirectivePlaceholder((this.customDirectives.push(value) - 1).toString());\n  }\n\n  storeEndCustomDirective(value: string) {\n    return this.getEndCustomDirectivePlaceholder((this.customDirectives.push(value) - 1).toString());\n  }\n\n  storeUnbalancedDirective(value: string) {\n    return this.getUnbalancedDirectivePlaceholder((this.unbalancedDirectives.push(value) - 1).toString());\n  }\n\n  storeBladeBrace(value: any, length: any) {\n    const index = this.bladeBraces.push(value) - 1;\n    const brace = '{{  }}';\n    return this.getBladeBracePlaceholder(index, length + brace.length);\n  }\n\n  storeRawBladeBrace(value: any) {\n    const index = this.rawBladeBraces.push(value) - 1;\n    return this.getRawBladeBracePlaceholder(index);\n  }\n\n  storeRawPhpTags(value: any) {\n    const index = this.rawPhpTags.push(value) - 1;\n    return this.getRawPhpTagPlaceholder(index);\n  }\n\n  storeScripts(value: any) {\n    const index = this.scripts.push(value) - 1;\n    return this.getScriptPlaceholder(index);\n  }\n\n  storeHtmlAttribute(value: string) {\n    const index = this.htmlAttributes.push(value) - 1;\n\n    if (value.length > 0) {\n      return this.getHtmlAttributePlaceholder(index.toString(), value.length);\n    }\n\n    return this.getHtmlAttributePlaceholder(index.toString(), 0);\n  }\n\n  storeShorthandBinding(value: any) {\n    const index = this.shorthandBindings.push(value) - 1;\n\n    return this.getShorthandBindingPlaceholder(index.toString(), value.length);\n  }\n\n  storeComponentAttribute(value: any) {\n    const index = this.componentAttributes.push(value) - 1;\n\n    return this.getComponentAttributePlaceholder(index.toString());\n  }\n\n  storeXData(value: any) {\n    const index = this.xData.push(value) - 1;\n    return this.getXDataPlaceholder(index);\n  }\n\n  storeXInit(value: any) {\n    const index = this.xInit.push(value) - 1;\n    return this.getXInitPlaceholder(index);\n  }\n\n  storeTemplatingString(value: any) {\n    const index = this.templatingStrings.push(value) - 1;\n    return this.getTemplatingStringPlaceholder(index);\n  }\n\n  storeStringLiteralInPhp(value: any) {\n    const index = this.stringLiteralInPhp.push(value) - 1;\n    return this.getStringLiteralInPhpPlaceholder(index);\n  }\n\n  storeBladeDirectiveInScript(value: string) {\n    return this.getBladeDirectiveInScriptPlaceholder((this.directivesInScript.push(value) - 1).toString());\n  }\n\n  getIgnoredLinePlaceholder(replace: any) {\n    return _.replace('___ignored_line_#___', '#', replace);\n  }\n\n  getCurlyBraceForJSPlaceholder(replace: any) {\n    return _.replace('___js_curly_brace_#___', '#', replace);\n  }\n\n  getRawPlaceholder(replace: any) {\n    return _.replace('___raw_block_#___', '#', replace);\n  }\n\n  getInlinePlaceholder(replace: any, length = 0) {\n    if (length > 0) {\n      const template = '___inline_directive_#___';\n      const gap = length - template.length;\n      return _.replace(`___inline_directive_${_.repeat('_', gap > 0 ? gap : 0)}#___`, '#', replace);\n    }\n\n    return _.replace('___inline_directive_+?#___', '#', replace);\n  }\n\n  getConditionPlaceholder(replace: any) {\n    return _.replace('___directive_condition_#___', '#', replace);\n  }\n\n  getInlinePhpPlaceholder(replace: any) {\n    return _.replace('___inline_php_directive_#___', '#', replace);\n  }\n\n  getRawPropsPlaceholder(replace: any) {\n    return _.replace('@__raw_props_block_#__@', '#', replace);\n  }\n\n  getBladeDirectivePlaceholder(replace: any) {\n    return _.replace('___blade_directive_#___', '#', replace);\n  }\n\n  getEscapedBladeDirectivePlaceholder(replace: string) {\n    return _.replace('___escaped_directive_#___', '#', replace);\n  }\n\n  getBladeCommentPlaceholder(replace: any) {\n    return _.replace('___blade_comment_#___', '#', replace);\n  }\n\n  getBladeBracePlaceholder(replace: any, length = 0) {\n    if (length > 0) {\n      const template = '___blade_brace_#___';\n      const gap = length - template.length;\n      return _.replace(`___blade_brace_${_.repeat('_', gap > 0 ? gap : 0)}#___`, '#', replace);\n    }\n\n    return _.replace('___blade_brace_+?#___', '#', replace);\n  }\n\n  getRawBladeBracePlaceholder(replace: any) {\n    return _.replace('___raw_blade_brace_#___', '#', replace);\n  }\n\n  getRawPhpTagPlaceholder(replace: any) {\n    return _.replace('___raw_php_tag_#___', '#', replace);\n  }\n\n  getScriptPlaceholder(replace: any) {\n    return _.replace('<blade ___scripts_#___ />', '#', replace);\n  }\n\n  getHtmlTagPlaceholder(replace: string) {\n    return _.replace('<blade ___html_tags_#___ />', '#', replace);\n  }\n\n  getInlineCustomDirectivePlaceholder(replace: string) {\n    return _.replace('___inline_cd_#___', '#', replace);\n  }\n\n  getBeginCustomDirectivePlaceholder(replace: string) {\n    return _.replace('@customdirective(___#___)', '#', replace);\n  }\n\n  getElseCustomDirectivePlaceholder(replace: string) {\n    return _.replace('@else(___#___)', '#', replace);\n  }\n\n  getEndCustomDirectivePlaceholder(replace: string) {\n    return _.replace('@endcustomdirective(___#___)', '#', replace);\n  }\n\n  getUnbalancedDirectivePlaceholder(replace: string) {\n    return _.replace('@if (unbalanced___#___)', '#', replace);\n  }\n\n  getHtmlAttributePlaceholder(replace: string, length: any) {\n    if (length && length > 0) {\n      const template = '___attrs_#___';\n      const gap = length - template.length;\n      return _.replace(`___attrs${_.repeat('_', gap > 0 ? gap : 1)}#___`, '#', replace);\n    }\n\n    if (_.isNull(length)) {\n      return _.replace('___attrs_#___', '#', replace);\n    }\n\n    return _.replace('___attrs_+?#___', '#', replace);\n  }\n\n  getShorthandBindingPlaceholder(replace: string, length: any = 0) {\n    if (length && length > 0) {\n      const template = '___short_binding_#___';\n      const gap = length - template.length;\n      return _.replace(`___short_binding_${_.repeat('_', gap > 0 ? gap : 1)}#___`, '#', replace);\n    }\n    return _.replace('___short_binding_+?#___', '#', replace);\n  }\n\n  getComponentAttributePlaceholder(replace: string) {\n    return _.replace('___attribute_#___', '#', replace);\n  }\n\n  getXInitPlaceholder(replace: any) {\n    return _.replace('___x_init_#___', '#', replace);\n  }\n\n  getPlaceholder(attribute: string, replace: any, length: any = null) {\n    if (length && length > 0) {\n      const template = `___${attribute}_#___`;\n      const gap = length - template.length;\n      return _.replace(`___${attribute}${_.repeat('_', gap > 0 ? gap : 1)}#___`, '#', replace);\n    }\n\n    if (_.isNull(length)) {\n      return _.replace(`___${attribute}_#___`, '#', replace);\n    }\n\n    return _.replace(`s___${attribute}_+?#___`, '#', replace);\n  }\n\n  getXDataPlaceholder(replace: any) {\n    return _.replace('___x_data_#___', '#', replace);\n  }\n\n  getTemplatingStringPlaceholder(replace: any) {\n    return _.replace('___templating_str_#___', '#', replace);\n  }\n\n  getStringLiteralInPhpPlaceholder(replace: any) {\n    return _.replace(\"'___php_content_#___'\", '#', replace);\n  }\n\n  getBladeDirectiveInScriptPlaceholder(replace: any) {\n    return _.replace('___directives_script_#___', '#', replace);\n  }\n\n  restoreIgnoredLines(content: any) {\n    return _.replace(\n      content,\n      new RegExp(`${this.getIgnoredLinePlaceholder('(\\\\d+)')}`, 'gm'),\n      (_match: any, p1: any) => {\n        return this.ignoredLines[p1];\n      },\n    );\n  }\n\n  restoreCurlyBraceForJS(content: any) {\n    return _.replace(\n      content,\n      new RegExp(`${this.getCurlyBraceForJSPlaceholder('(\\\\d+)')}`, 'gm'),\n      (_match: any, p1: any) => {\n        return `@{{ ${beautify.js_beautify(this.curlyBracesWithJSs[p1].trim())} }}`;\n      },\n    );\n  }\n\n  restorePhpBlock(content: any) {\n    return this.restoreRawPhpBlock(content).then((target) => this.restoreRawPropsBlock(target));\n  }\n\n  async restoreRawPhpBlock(content: any) {\n    return _.replace(content, new RegExp(`${this.getRawPlaceholder('(\\\\d+)')}`, 'gm'), (match: any, p1: number) => {\n      let rawBlock = this.rawBlocks[p1];\n      const placeholder = this.getRawPlaceholder(p1.toString());\n      const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n      const indent = detectIndent(matchedLine[0]);\n\n      if (this.isInline(rawBlock) && this.isMultilineStatement(rawBlock)) {\n        rawBlock = util.formatStringAsPhp(`<?php\\n${rawBlock}\\n?>`).trim();\n      } else if (rawBlock.split('\\n').length > 1) {\n        rawBlock = util\n          .formatStringAsPhp(`<?php${rawBlock}?>`)\n          // @ts-expect-error ts-migrate(2554) FIXME: Expected 0 arguments, but got 1.\n          .trimRight('\\n');\n      } else {\n        rawBlock = `<?php${rawBlock}?>`;\n      }\n\n      return _.replace(rawBlock, /^(\\s*)?<\\?php(.*?)\\?>/gms, (_matched: any, _q1: any, q2: any) => {\n        if (this.isInline(rawBlock)) {\n          return `@php${q2}@endphp`;\n        }\n\n        const preserved = this.preserveStringLiteralInPhp(q2);\n        const indented = this.indentRawBlock(indent, preserved);\n        const restored = this.restoreStringLiteralInPhp(indented);\n\n        return `@php${restored}@endphp`;\n      });\n    });\n  }\n\n  async restoreRawPropsBlock(content: any) {\n    const regex = this.getRawPropsPlaceholder('(\\\\d+)');\n    return _.replace(\n      content,\n      new RegExp(regex, 'gms'),\n      (_match: any, p1: any) => `@props(${util.formatRawStringAsPhp(this.rawPropsBlocks[p1]).trimRight()})`,\n    );\n  }\n\n  isInline(content: any) {\n    return _.split(content, '\\n').length === 1;\n  }\n\n  isMultilineStatement(rawBlock: any) {\n    return util.formatStringAsPhp(`<?php${rawBlock}?>`).trimRight().split('\\n').length > 1;\n  }\n\n  indentRawBlock(indent: detectIndent.Indent, content: any) {\n    if (_.isEmpty(indent.indent)) {\n      return content;\n    }\n\n    if (this.isInline(content)) {\n      return `${indent.indent}${content}`;\n    }\n\n    const leftIndentAmount = indent.amount;\n    const indentLevel = leftIndentAmount / this.indentSize;\n    const prefix = this.indentCharacter.repeat(indentLevel < 0 ? 0 : (indentLevel + 1) * this.indentSize);\n    const prefixForEnd = this.indentCharacter.repeat(indentLevel < 0 ? 0 : indentLevel * this.indentSize);\n\n    const lines = content.split('\\n');\n\n    return _.chain(lines)\n      .map((line: any, index: any) => {\n        if (index === 0) {\n          return line.trim();\n        }\n\n        if (index === lines.length - 1) {\n          return prefixForEnd + line;\n        }\n\n        return prefix + line;\n      })\n      .join('\\n');\n  }\n\n  indentBladeDirectiveBlock(indent: detectIndent.Indent, content: any) {\n    if (_.isEmpty(indent.indent)) {\n      return content;\n    }\n\n    if (this.isInline(content)) {\n      return `${indent.indent}${content}`;\n    }\n\n    const leftIndentAmount = indent.amount;\n    const indentLevel = leftIndentAmount / this.indentSize;\n    const prefixSpaces = this.indentCharacter.repeat(indentLevel < 0 ? 0 : indentLevel * this.indentSize);\n    const prefixForEnd = this.indentCharacter.repeat(indentLevel < 0 ? 0 : indentLevel * this.indentSize);\n\n    const lines = content.split('\\n');\n\n    return _.chain(lines)\n      .map((line: any, index: any) => {\n        if (index === lines.length - 1) {\n          return prefixForEnd + line;\n        }\n\n        return prefixSpaces + line;\n      })\n      .value()\n      .join('\\n');\n  }\n\n  indentScriptBlock(indent: detectIndent.Indent, content: any) {\n    if (_.isEmpty(indent.indent)) {\n      return content;\n    }\n\n    if (this.isInline(content)) {\n      return `${content}`;\n    }\n\n    const leftIndentAmount = indent.amount;\n    const indentLevel = leftIndentAmount / this.indentSize;\n    const prefixSpaces = this.indentCharacter.repeat(indentLevel < 0 ? 0 : indentLevel * this.indentSize);\n    const prefixForEnd = this.indentCharacter.repeat(indentLevel < 0 ? 0 : indentLevel * this.indentSize);\n\n    const preserved = _.replace(content, /`.*?`/gs, (match: any) => this.storeTemplatingString(match));\n\n    const lines = preserved.split('\\n');\n\n    const indented = _.chain(lines)\n      .map((line: any, index: any) => {\n        if (index === 0) {\n          return line;\n        }\n\n        if (index === lines.length - 1) {\n          return prefixForEnd + line;\n        }\n\n        if (_.isEmpty(line)) {\n          return line;\n        }\n\n        return prefixSpaces + line;\n      })\n      .value()\n      .join('\\n');\n\n    return this.restoreTemplatingString(`${indented}`);\n  }\n\n  indentRawPhpBlock(indent: detectIndent.Indent, content: any) {\n    if (_.isEmpty(indent.indent)) {\n      return content;\n    }\n\n    if (this.isInline(content)) {\n      return `${content}`;\n    }\n\n    const leftIndentAmount = indent.amount;\n    const indentLevel = leftIndentAmount / this.indentSize;\n    const prefixSpaces = this.indentCharacter.repeat(indentLevel < 0 ? 0 : indentLevel * this.indentSize);\n\n    const lines = content.split('\\n');\n\n    return _.chain(lines)\n      .map((line: any, index: any) => {\n        if (index === 0) {\n          return line.trim();\n        }\n\n        return prefixSpaces + line;\n      })\n      .value()\n      .join('\\n');\n  }\n\n  indentComponentAttribute(prefix: string, content: string) {\n    if (_.isEmpty(prefix)) {\n      return content;\n    }\n\n    if (this.isInline(content)) {\n      return `${content}`;\n    }\n\n    if (this.isInline(content) && /\\S/.test(prefix)) {\n      return `${content}`;\n    }\n\n    const leftIndentAmount = detectIndent(prefix).amount;\n    const indentLevel = leftIndentAmount / this.indentSize;\n    const prefixSpaces = this.indentCharacter.repeat(indentLevel < 0 ? 0 : indentLevel * this.indentSize);\n\n    const lines = content.split('\\n');\n\n    return _.chain(lines)\n      .map((line: any, index: any) => {\n        if (index === 0) {\n          return line.trim();\n        }\n\n        return prefixSpaces + line;\n      })\n      .value()\n      .join('\\n');\n  }\n\n  restoreBladeDirectivesInScripts(content: any) {\n    const regex = new RegExp(`${this.getBladeDirectivePlaceholder('(\\\\d+)')}`, 'gm');\n\n    // restore inline blade directive\n    let result = _.replace(content, regex, (_match: any, p1: number) => {\n      const placeholder = this.getBladeDirectivePlaceholder(p1.toString());\n      const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n      const indent = detectIndent(matchedLine[0]);\n\n      return this.indentBladeDirectiveBlock(indent, this.bladeDirectives[p1]);\n    });\n\n    result = _.replace(result, /(?<=<script[^>]*?(?<!=)>)(.*?)(?=<\\/script>)/gis, (match: string) => {\n      let formatted: string = match;\n\n      // restore begin\n      formatted = _.replace(\n        formatted,\n        new RegExp(\n          `if \\\\( \\\\/\\\\*(?:(?:${this.getBladeDirectiveInScriptPlaceholder('(\\\\d+)')}).*?)\\\\*\\\\/ \\\\) \\\\{`,\n          'gis',\n        ),\n        (_match: any, p1: any) => {\n          return `${this.directivesInScript[p1]}`;\n        },\n      );\n\n      // restore else\n      formatted = _.replace(\n        formatted,\n        new RegExp(`} \\\\/\\\\* (?:${this.getBladeDirectiveInScriptPlaceholder('(\\\\d+)')}) \\\\*\\\\/ {`, 'gis'),\n        (_match: any, p1: any) => {\n          return `${this.directivesInScript[p1].trim()}`;\n        },\n      );\n\n      // restore end\n      formatted = _.replace(\n        formatted,\n        new RegExp(`} \\\\/\\\\*(?:${this.getBladeDirectiveInScriptPlaceholder('(\\\\d+)')})\\\\*\\\\/`, 'gis'),\n        (_match: any, p1: any) => {\n          return `${this.directivesInScript[p1]}`;\n        },\n      );\n\n      // restore php block\n      formatted = _.replace(\n        formatted,\n        new RegExp(`${this.getRawPlaceholder('(\\\\d+)')}`, 'gm'),\n        // eslint-disable-next-line no-shadow\n        (match: any, p1: number) => {\n          let rawBlock = this.rawBlocks[p1];\n          const placeholder = this.getRawPlaceholder(p1.toString());\n          const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n          const indent = detectIndent(matchedLine[0]);\n\n          if (this.isInline(rawBlock) && this.isMultilineStatement(rawBlock)) {\n            rawBlock = util.formatStringAsPhp(`<?php\\n${rawBlock}\\n?>`).trim();\n          } else if (rawBlock.split('\\n').length > 1) {\n            rawBlock = util.formatStringAsPhp(`<?php${rawBlock}?>`).trim();\n          } else {\n            rawBlock = `<?php${rawBlock}?>`;\n          }\n\n          return _.replace(rawBlock, /^(\\s*)?<\\?php(.*?)\\?>/gms, (_matched: any, _q1: any, q2: any) => {\n            if (this.isInline(rawBlock)) {\n              return `@php${q2}@endphp`;\n            }\n\n            const preserved = this.preserveStringLiteralInPhp(q2);\n            const indented = this.indentRawBlock(indent, preserved);\n            const restored = this.restoreStringLiteralInPhp(indented);\n\n            return `@php${restored}@endphp`;\n          });\n        },\n      );\n\n      // delete place holder\n      formatted = _.replace(\n        formatted,\n        /(?<=[\\S]+)\\s*?\\/\\*\\*\\*script_placeholder\\*\\*\\*\\/(\\s)/gim,\n        (_match: any, p1: string) => {\n          return p1;\n        },\n      );\n\n      return formatted;\n    });\n\n    if (regex.test(result)) {\n      result = this.restoreBladeDirectivesInScripts(result);\n    }\n\n    return result;\n  }\n\n  async formatPreservedBladeDirectives(directives: any) {\n    return Aigle.map(directives, async (content: any) => {\n      const formattedAsHtml = await this.formatAsHtml(content);\n      const formatted = await this.formatAsBlade(formattedAsHtml);\n      return formatted.trimRight('\\n');\n    });\n  }\n\n  restoreBladeComment(content: any) {\n    return new Promise((resolve) => resolve(content)).then((res: any) =>\n      _.replace(\n        res,\n        new RegExp(`${this.getBladeCommentPlaceholder('(\\\\d+)')}`, 'gms'),\n        (_match: any, p1: any) => `{{-- ${this.bladeComments[p1].trim()} --}}`,\n      ),\n    );\n  }\n\n  async restoreEscapedBladeDirective(content: any) {\n    return new Promise((resolve) => resolve(content)).then((res: any) =>\n      _.replace(\n        res,\n        new RegExp(`${this.getEscapedBladeDirectivePlaceholder('(\\\\d+)')}`, 'gms'),\n        (_match: string, p1: number) => this.escapedBladeDirectives[p1],\n      ),\n    );\n  }\n\n  restoreBladeBrace(content: any) {\n    return new Promise((resolve) => resolve(content)).then((res: any) =>\n      _.replace(res, new RegExp(`${this.getBladeBracePlaceholder('(\\\\d+)')}`, 'gm'), (_match: string, p1: number) => {\n        const placeholder = this.getBladeBracePlaceholder(p1.toString());\n        const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n        const indent = detectIndent(matchedLine[0]);\n        const bladeBrace = this.bladeBraces[p1];\n\n        if (bladeBrace.trim() === '') {\n          return `{{${bladeBrace}}}`;\n        }\n\n        if (this.isInline(bladeBrace)) {\n          return `{{ ${util\n            .formatRawStringAsPhp(bladeBrace, 1000, false)\n            .replace(/([\\n\\s]*)->([\\n\\s]*)/gs, '->')\n            .split('\\n')\n            .map((line) => line.trim())\n            .join('')\n            // @ts-expect-error ts-migrate(2554) FIXME: Expected 0 arguments, but got 1.\n            .trimRight('\\n')} }}`;\n        }\n\n        return `{{ ${this.indentRawPhpBlock(\n          indent,\n          util\n            .formatRawStringAsPhp(bladeBrace, this.wrapLineLength, true)\n            .replace(/([\\n\\s]*)->([\\n\\s]*)/gs, '->')\n            .trim()\n            // @ts-expect-error ts-migrate(2554) FIXME: Expected 0 arguments, but got 1.\n            .trimRight('\\n'),\n        )} }}`;\n      }),\n    );\n  }\n\n  restoreRawBladeBrace(content: any) {\n    return new Promise((resolve) => resolve(content)).then((res) =>\n      _.replace(\n        // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'unknown' is not assignable to pa... Remove this comment to see the full error message\n        res,\n        new RegExp(`${this.getRawBladeBracePlaceholder('(\\\\d+)')}`, 'gms'),\n        (_match: any, p1: any) => {\n          const bladeBrace = this.rawBladeBraces[p1];\n\n          if (bladeBrace.trim() === '') {\n            return `{!!${bladeBrace}!!}`;\n          }\n\n          return `{!! ${util\n            .formatRawStringAsPhp(bladeBrace)\n            .replace(/([\\n\\s]*)->([\\n\\s]*)/gs, '->')\n            .trim()\n            // @ts-expect-error ts-migrate(2554) FIXME: Expected 0 arguments, but got 1.\n            .trimRight('\\n')} !!}`;\n        },\n      ),\n    );\n  }\n\n  restoreInlineDirective(content: any) {\n    return new Promise((resolve) => resolve(content)).then((res) =>\n      _.replace(\n        // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'unknown' is not assignable to pa... Remove this comment to see the full error message\n        res,\n        new RegExp(`${this.getInlinePlaceholder('(\\\\d+)')}`, 'gms'),\n        (_match: any, p1: any) => {\n          const matched = this.inlineDirectives[p1];\n          return matched;\n        },\n      ),\n    );\n  }\n\n  restoreConditions(content: any) {\n    return new Promise((resolve) => resolve(content)).then((res: any) =>\n      _.replace(res, new RegExp(`${this.getConditionPlaceholder('(\\\\d+)')}`, 'gms'), (_match: any, p1: any) => {\n        const placeholder = this.getConditionPlaceholder(p1);\n        const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n        const indent = detectIndent(matchedLine[0]);\n\n        const matched = this.conditions[p1];\n\n        return this.indentComponentAttribute(\n          indent.indent,\n          util\n            .formatRawStringAsPhp(matched)\n            .replace(/([\\n\\s]*)->([\\n\\s]*)/gs, '->')\n            .trimEnd(),\n        );\n      }),\n    );\n  }\n\n  restoreUnbalancedDirective(content: any) {\n    return new Promise((resolve) => resolve(content)).then((res: any) =>\n      _.replace(res, /@if \\(unbalanced___(\\d+)___\\)/gms, (_match: any, p1: any) => {\n        const matched = this.unbalancedDirectives[p1];\n        return matched;\n      }),\n    );\n  }\n\n  restoreInlinePhpDirective(content: any) {\n    return new Promise((resolve) => resolve(content)).then((res) =>\n      _.replace(\n        // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'unknown' is not assignable to pa... Remove this comment to see the full error message\n        res,\n        new RegExp(`${this.getInlinePhpPlaceholder('(\\\\d+)')}`, 'gm'),\n        (_match: any, p1: any) => {\n          const matched = this.inlinePhpDirectives[p1];\n          const placeholder = this.getInlinePhpPlaceholder(p1);\n          const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n          const indent = detectIndent(matchedLine[0]);\n\n          if (matched.includes('@php')) {\n            return `${util\n              .formatRawStringAsPhp(matched)\n              .replace(/([\\n\\s]*)->([\\n\\s]*)/gs, '->')\n              .trim()\n              // @ts-expect-error ts-migrate(2554) FIXME: Expected 0 arguments, but got 1.\n              .trimRight('\\n')}`;\n          }\n\n          if (/(@button|@class|@include|@disabled|@checked)/gi.test(matched)) {\n            const formatted = _.replace(\n              matched,\n              /(?<=@(button|class|include|disabled|checked).*?\\()(.*)(?=\\))/gis,\n              (match2: any, p3: any, p4: any) => {\n                let wrapLength = this.wrapLineLength;\n\n                if (['button', 'class'].includes(p3)) {\n                  wrapLength = 80;\n                }\n\n                if (p3 === 'include') {\n                  wrapLength = this.wrapLineLength - `func`.length - p1.length - indent.amount;\n                }\n\n                const inside = util\n                  .formatRawStringAsPhp(`func(${p4})`, wrapLength, true)\n                  .replace(/([\\n\\s]*)->([\\n\\s]*)/gs, '->')\n                  .replace(/,(\\s*?\\))/gis, (_match5, p5) => p5)\n                  .trim();\n\n                if (this.isInline(inside)) {\n                  return `${this.indentRawPhpBlock(indent, `${inside}`)\n                    .replace(/func\\((.*)\\)/gis, (match: string, p5: string) => p5)\n                    .trim()}`;\n                }\n\n                return this.indentRawPhpBlock(indent, `${inside}`)\n                  .replace(/func\\((.*)\\)/gis, (match: string, p5: string) => p5)\n                  .trim();\n              },\n            );\n\n            return formatted;\n          }\n\n          return `${util.formatRawStringAsPhp(matched).trimEnd()}`;\n        },\n      ),\n    );\n  }\n\n  restoreRawPhpTags(content: any) {\n    return new Promise((resolve) => resolve(content)).then((res) =>\n      _.replace(\n        // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'unknown' is not assignable to pa... Remove this comment to see the full error message\n        res,\n        new RegExp(`${this.getRawPhpTagPlaceholder('(\\\\d+)')}`, 'gms'),\n        (_match: any, p1: any) => {\n          // const result= this.rawPhpTags[p1];\n          try {\n            const matched = this.rawPhpTags[p1];\n            const commentBlockExists = /(?<=<\\?php\\s*?)\\/\\*.*?\\*\\/(?=\\s*?\\?>)/gim.test(matched);\n            const inlinedComment = commentBlockExists && this.isInline(matched);\n            const placeholder = this.getRawPhpTagPlaceholder(p1);\n            const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n            const indent = detectIndent(matchedLine[0]);\n\n            if (inlinedComment) {\n              return matched;\n            }\n\n            const result = util\n              .formatStringAsPhp(this.rawPhpTags[p1])\n              .trim()\n              // @ts-expect-error ts-migrate(2554) FIXME: Expected 0 arguments, but got 1.\n              .trimRight('\\n');\n\n            if (this.isInline(result)) {\n              return result;\n            }\n\n            if (indent.indent) {\n              return this.indentRawPhpBlock(indent, result);\n            }\n\n            return result;\n          } catch (e) {\n            return `${this.rawPhpTags[p1]}`;\n          }\n        },\n      ),\n    );\n  }\n\n  restoreScripts(content: any) {\n    return new Promise((resolve) => resolve(content)).then((res) =>\n      _.replace(\n        // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'unknown' is not assignable to pa... Remove this comment to see the full error message\n        res,\n        new RegExp(`${this.getScriptPlaceholder('(\\\\d+)')}`, 'gim'),\n        (_match: any, p1: number) => {\n          const script = this.scripts[p1];\n          const placeholder = this.getScriptPlaceholder(p1);\n          const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n          const indent = detectIndent(matchedLine[0]);\n\n          const options = {\n            indent_size: util.optional(this.options).indentSize || 4,\n            wrap_line_length: util.optional(this.options).wrapLineLength || 120,\n            wrap_attributes: util.optional(this.options).wrapAttributes || 'auto',\n            end_with_newline: false,\n            templating: ['php'],\n          };\n\n          return this.indentScriptBlock(indent, beautify.html_beautify(script, options));\n        },\n      ),\n    );\n  }\n\n  async restoreCustomDirective(content: string) {\n    return this.restoreInlineCustomDirective(content)\n      .then((data: string) => this.restoreBeginCustomDirective(data))\n      .then((data: string) => this.restoreElseCustomDirective(data))\n      .then((data: string) => this.restoreEndCustomDirective(data));\n  }\n\n  async restoreInlineCustomDirective(content: string) {\n    return _.replace(\n      content,\n      new RegExp(`${this.getInlineCustomDirectivePlaceholder('(\\\\d+)')}`, 'gim'),\n      (_match: any, p1: number) => {\n        const placeholder = this.getInlineCustomDirectivePlaceholder(p1.toString());\n        const matchedLine = content.match(new RegExp(`^(.*?)${_.escapeRegExp(placeholder)}`, 'gmi')) ?? [''];\n        const indent = detectIndent(matchedLine[0]);\n\n        const matched = `${this.customDirectives[p1]}`;\n        return _.replace(matched, /(@[a-zA-z0-9\\-_]+)(.*)/gis, (match2: string, p2: string, p3: string) => {\n          try {\n            const formatted = util\n              .formatRawStringAsPhp(`func${p3}`)\n              .replace(/([\\n\\s]*)->([\\n\\s]*)/gs, '->')\n              .trim()\n              .substring(4);\n            return `${p2}${this.indentComponentAttribute(indent.indent, formatted)}`;\n          } catch (error) {\n            return `${match2}`;\n          }\n        });\n      },\n    );\n  }\n\n  async restoreBeginCustomDirective(content: string) {\n    return _.replace(\n      content,\n      new RegExp(`@customdirective\\\\(___(\\\\d+)___\\\\)\\\\s*?(${nestedParenthesisRegex})*`, 'gim'),\n      (_match: any, p1: number) => {\n        const placeholder = this.getBeginCustomDirectivePlaceholder(p1.toString());\n        const matchedLine = content.match(new RegExp(`^(.*?)${_.escapeRegExp(placeholder)}`, 'gmi')) ?? [''];\n\n        const indent = detectIndent(matchedLine[0]);\n        const matched = `${this.customDirectives[p1]}`;\n\n        return _.replace(matched, /(@[a-zA-z0-9\\-_]+)(.*)/gis, (match2: string, p3: string, p4: string) => {\n          try {\n            const formatted = util\n              .formatRawStringAsPhp(`func${p4}`, this.wrapLineLength, false)\n              .replace(/([\\n\\s]*)->([\\n\\s]*)/gs, '->')\n              .trim()\n              .substring(4);\n            return `${p3}${this.indentComponentAttribute(indent.indent, formatted)}`;\n          } catch (error) {\n            return `${match2}`;\n          }\n        });\n      },\n    );\n  }\n\n  async restoreElseCustomDirective(content: string) {\n    return _.replace(content, /@else\\(___(\\d+)___\\)/gim, (_match: any, p1: number) => {\n      return `${this.customDirectives[p1]}`;\n    });\n  }\n\n  async restoreEndCustomDirective(content: string) {\n    return _.replace(content, /@endcustomdirective\\(___(\\d+)___\\)/gim, (_match: any, p1: number) => {\n      return `${this.customDirectives[p1]}`;\n    });\n  }\n\n  async restoreHtmlTags(content: any) {\n    return _.replace(\n      content,\n      new RegExp(`${this.getHtmlTagPlaceholder('(\\\\d+)')}`, 'gim'),\n      (_match: any, p1: number) => {\n        const placeholder = this.getHtmlTagPlaceholder(p1.toString());\n        const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n        const indent = detectIndent(matchedLine[0]);\n\n        const options = {\n          indent_size: util.optional(this.options).indentSize || 4,\n          wrap_line_length: util.optional(this.options).wrapLineLength || 120,\n          wrap_attributes: util.optional(this.options).wrapAttributes || 'auto',\n          end_with_newline: false,\n          templating: ['php'],\n        };\n\n        const matched = this.htmlTags[p1];\n        const openingTag = _.first(matched.match(/(<(textarea|pre).*?(?<!=)>)(?=.*?<\\/\\2>)/gis));\n\n        if (openingTag === undefined) {\n          return `${this.indentScriptBlock(indent, beautify.html_beautify(matched, options))}`;\n        }\n\n        const restofTag = matched.substring(openingTag.length, matched.length);\n\n        return `${this.indentScriptBlock(indent, beautify.html_beautify(openingTag, options))}${restofTag}`;\n      },\n    );\n  }\n\n  restoreHtmlAttributes(content: string) {\n    return _.replace(\n      content,\n      // @ts-expect-error ts-migrate(2554) FIXME: Expected 0 arguments, but got 1.\n      new RegExp(`${this.getHtmlAttributePlaceholder('(\\\\d+)')}`, 'gms'),\n      (_match: string, p1: number) => this.htmlAttributes[p1],\n    );\n  }\n\n  restoreXData(content: any) {\n    return _.replace(content, new RegExp(`${this.getXDataPlaceholder('(\\\\d+)')}`, 'gm'), (_match: any, p1: any) => {\n      const placeholder = this.getXDataPlaceholder(p1.toString());\n      const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n      const indent = detectIndent(matchedLine[0]);\n\n      const lines = this.formatJS(this.xData[p1]).split('\\n');\n\n      const indentLevel = indent.amount / (this.indentCharacter === '\\t' ? 4 : 1);\n\n      const firstLine = lines[0];\n      const prefix = this.indentCharacter.repeat(indentLevel < 0 ? 0 : indentLevel);\n      const offsettedLines = lines.map((line) => prefix + line);\n      offsettedLines[0] = firstLine;\n      return `${offsettedLines.join('\\n')}`;\n    });\n  }\n\n  restoreXInit(content: any) {\n    return _.replace(content, new RegExp(`${this.getXInitPlaceholder('(\\\\d+)')}`, 'gm'), (_match: any, p1: number) => {\n      const placeholder = this.getXInitPlaceholder(p1.toString());\n      const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n      const indent = detectIndent(matchedLine[0]);\n\n      const lines = this.formatJS(this.xInit[p1]).split('\\n');\n\n      const indentLevel = indent.amount / (this.indentCharacter === '\\t' ? 4 : 1);\n\n      const firstLine = lines[0];\n      const prefix = this.indentCharacter.repeat(indentLevel < 0 ? 0 : indentLevel);\n      const offsettedLines = lines.map((line) => prefix + line);\n      offsettedLines[0] = firstLine;\n      return `${offsettedLines.join('\\n')}`;\n    });\n  }\n\n  restoreTemplatingString(content: any) {\n    return _.replace(\n      content,\n      new RegExp(`${this.getTemplatingStringPlaceholder('(\\\\d+)')}`, 'gms'),\n      (_match: any, p1: any) => this.templatingStrings[p1],\n    );\n  }\n\n  restoreStringLiteralInPhp(content: any) {\n    return _.replace(\n      content,\n      new RegExp(`${this.getStringLiteralInPhpPlaceholder('(\\\\d+)')}`, 'gms'),\n      (_match: any, p1: any) => this.stringLiteralInPhp[p1],\n    );\n  }\n\n  restoreComponentAttribute(content: string): string {\n    return _.replace(\n      content,\n      new RegExp(`${this.getComponentAttributePlaceholder('(\\\\d+)')}`, 'gim'),\n      (_match: any, p1: any) => {\n        const placeholder = this.getComponentAttributePlaceholder(p1);\n        const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n        const indent = detectIndent(matchedLine[0]);\n\n        const matched = this.componentAttributes[p1];\n        const formatted = _.replace(\n          matched,\n          /(:{1,2}.*?=)([\"'])(.*?)(?=\\2)/gis,\n          (match, p2: string, p3: string, p4: string) => {\n            if (p4 === '') {\n              return match;\n            }\n\n            if (p2.startsWith('::')) {\n              return `${p2}${p3}${beautify\n                .js_beautify(p4, {\n                  wrap_line_length: this.wrapLineLength - indent.amount,\n                  brace_style: 'preserve-inline',\n                })\n                .trim()}`;\n            }\n\n            if (this.isInline(p4)) {\n              try {\n                return `${p2}${p3}${util.formatRawStringAsPhp(p4, this.wrapLineLength - indent.amount).trimEnd()}`;\n              } catch (error) {\n                return `${p2}${p3}${p4}`;\n              }\n            }\n\n            return `${p2}${p3}${util.formatRawStringAsPhp(p4, this.wrapLineLength - indent.amount).trimEnd()}`;\n          },\n        );\n\n        return `${this.indentComponentAttribute(indent.indent, formatted)}`;\n      },\n    );\n  }\n\n  restoreShorthandBinding(content: any) {\n    return _.replace(\n      content,\n      new RegExp(`${this.getShorthandBindingPlaceholder('(\\\\d+)')}`, 'gms'),\n      (_match: any, p1: any) => {\n        const placeholder = this.getShorthandBindingPlaceholder(p1);\n        const matchedLine = content.match(new RegExp(`^(.*?)${placeholder}`, 'gmi')) ?? [''];\n        const indent = detectIndent(matchedLine[0]);\n\n        const matched = this.shorthandBindings[p1];\n\n        const formatted = _.replace(\n          matched,\n          /(:{1,2}.*?=)([\"'])(.*?)(?=\\2)/gis,\n          (match, p2: string, p3: string, p4: string) => {\n            const beautifyOpts: JSBeautifyOptions = {\n              wrap_line_length: this.wrapLineLength - indent.amount,\n              brace_style: 'preserve-inline',\n            };\n\n            if (p4 === '') {\n              return match;\n            }\n\n            if (this.isInline(p4)) {\n              try {\n                return `${p2}${p3}${beautify.js_beautify(p4, beautifyOpts).trimEnd()}`;\n              } catch (error) {\n                return `${p2}${p3}${p4}`;\n              }\n            }\n\n            return `${p2}${p3}${beautify.js_beautify(p4, beautifyOpts).trimEnd()}`;\n          },\n        );\n\n        return `${this.indentComponentAttribute(indent.indent, formatted)}`;\n      },\n    );\n  }\n\n  async formatAsBlade(content: any) {\n    // init parameters\n    this.currentIndentLevel = 0;\n    this.shouldBeIndent = false;\n\n    const splitedLines = util.splitByLines(content);\n    const vsctmModule = await new vsctm.VscodeTextmate(this.vsctm, this.oniguruma);\n    // @ts-expect-error ts-migrate(2554) FIXME: Expected 0 arguments, but got 1.\n    const registry = vsctmModule.createRegistry(content);\n\n    const formatted = registry\n      .loadGrammar('text.html.php.blade')\n      .then((grammar: any) => vsctmModule.tokenizeLines(splitedLines, grammar))\n      .then((tokenizedLines: any) => this.formatTokenizedLines(splitedLines, tokenizedLines))\n      .catch((err: any) => {\n        throw err;\n      });\n\n    return formatted;\n  }\n\n  formatTokenizedLines(splitedLines: any, tokenizedLines: any) {\n    this.result = [];\n    this.stack = [];\n    for (let i = 0; i < splitedLines.length; i += 1) {\n      const originalLine = splitedLines[i];\n      const tokenizeLineResult = tokenizedLines[i];\n      this.processLine(tokenizeLineResult, originalLine);\n    }\n\n    return this.result.join(os.EOL);\n  }\n\n  processLine(tokenizeLineResult: any, originalLine: any) {\n    this.processTokenizeResult(tokenizeLineResult, originalLine);\n  }\n\n  processKeyword(token: any) {\n    if (_.includes(phpKeywordStartTokens, token)) {\n      if (_.last(this.stack) === '@case' && token === '@case') {\n        this.decrementIndentLevel();\n      }\n\n      if (token === '@case') {\n        this.shouldBeIndent = true;\n      }\n\n      this.stack.push(token);\n      return;\n    }\n\n    if (_.includes(phpKeywordEndTokens, token)) {\n      if (token === '@break') {\n        this.decrementIndentLevel();\n        this.stack.pop();\n        this.stack.push(token);\n        return;\n      }\n\n      if (_.last(this.stack) !== '@hassection') {\n        this.stack.pop();\n        return;\n      }\n    }\n\n    if (_.includes(indentStartAndEndTokens, token)) {\n      this.shouldBeIndent = true;\n      this.stack.push(token);\n    }\n\n    if (_.includes(indentStartOrElseTokens, token)) {\n      if (_.includes(tokenForIndentStartOrElseTokens, _.last(this.stack))) {\n        this.decrementIndentLevel();\n        this.shouldBeIndent = true;\n      }\n    }\n\n    if (_.includes(indentStartTokens, token)) {\n      if (_.last(this.stack) === '@section' && token === '@section') {\n        if (this.currentIndentLevel > 0) this.decrementIndentLevel();\n        this.shouldBeIndent = true;\n        this.stack.push(token);\n      } else {\n        this.shouldBeIndent = true;\n        this.stack.push(token);\n      }\n    }\n\n    if (_.includes(indentEndTokens, token)) {\n      if (token === '@endswitch' && _.last(this.stack) === '@default') {\n        this.decrementIndentLevel(2);\n        this.shouldBeIndent = false;\n        return;\n      }\n\n      this.decrementIndentLevel();\n      this.shouldBeIndent = false;\n      this.stack.pop();\n    }\n\n    if (_.includes(indentElseTokens, token)) {\n      this.decrementIndentLevel();\n      this.shouldBeIndent = true;\n    }\n  }\n\n  processToken(tokenStruct: any, token: any) {\n    if (_.includes(tokenStruct.scopes, 'punctuation.definition.comment.begin.blade')) {\n      this.isInsideCommentBlock = true;\n    }\n\n    if (this.argumentCheck) {\n      const { count, inString, stack } = this.argumentCheck;\n      if (!inString && token === ')') {\n        stack.push(token);\n        count[token] += 1;\n        if (count['('] === count[token]) {\n          // finished\n          const expression = stack.join('');\n          const argumentCount = util.getArgumentsCount(expression);\n          if (argumentCount >= this.argumentCheck.unindentOn) this.shouldBeIndent = false;\n          this.argumentCheck = false;\n        }\n        return;\n      }\n      stack.push(token);\n      if (inString === token) this.argumentCheck.inString = false;\n      else if (!inString && (token === '\"' || token === \"'\")) this.argumentCheck.inString = token;\n      if (token === '(' && !inString) count[token] += 1;\n    }\n\n    if (_.includes(tokenStruct.scopes, 'punctuation.definition.comment.end.blade')) {\n      this.isInsideCommentBlock = false;\n    }\n    if (token === '{{--' || token.includes('{{--')) {\n      this.isInsideCommentBlock = true;\n    }\n\n    if (token === '--}}' || token.includes('--}}')) {\n      this.isInsideCommentBlock = false;\n    }\n\n    if (!_.includes(tokenStruct.scopes, 'keyword.blade')) {\n      return;\n    }\n\n    if (this.isInsideCommentBlock) {\n      return;\n    }\n\n    this.processKeyword(token.toLowerCase());\n    if (_.includes(Object.keys(optionalStartWithoutEndTokens), token.toLowerCase())) {\n      this.argumentCheck = {\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        unindentOn: optionalStartWithoutEndTokens[token.toLowerCase()],\n        stack: [],\n        inString: false,\n        count: { '(': 0, ')': 0 },\n      };\n    }\n  }\n\n  processTokenizeResult(tokenizeLineResult: any, originalLine: any) {\n    if (this.shouldBeIndent) {\n      this.incrementIndentLevel();\n      this.shouldBeIndent = false;\n    }\n\n    if (hasStartAndEndToken(tokenizeLineResult, originalLine)) {\n      this.insertFormattedLineToResult(originalLine);\n      return;\n    }\n\n    for (let j = 0; j < tokenizeLineResult.tokens.length; j += 1) {\n      const tokenStruct = tokenizeLineResult.tokens[j];\n\n      const token = originalLine.substring(tokenStruct.startIndex, tokenStruct.endIndex).trim();\n\n      this.processToken(tokenStruct, token);\n    }\n\n    this.insertFormattedLineToResult(originalLine);\n  }\n\n  insertFormattedLineToResult(originalLine: any) {\n    const originalLineWhitespaces = detectIndent(originalLine).amount;\n    const whitespaces = originalLineWhitespaces + this.indentSize * this.currentIndentLevel;\n    const formattedLine = this.indentCharacter.repeat(whitespaces < 0 ? 0 : whitespaces) + originalLine.trim();\n\n    // blankline\n    if (originalLine.length === 0) {\n      this.result.push(originalLine);\n    }\n\n    // formatted line\n    if (originalLine.length !== 0 && formattedLine.length > 0) {\n      this.result.push(formattedLine);\n    }\n\n    if (formattedLine !== originalLine) {\n      this.diffs.push({\n        original: originalLine,\n        formatted: formattedLine,\n      });\n    }\n  }\n\n  incrementIndentLevel(level = 1) {\n    this.currentIndentLevel += level;\n  }\n\n  decrementIndentLevel(level = 1) {\n    this.currentIndentLevel -= level;\n  }\n\n  formatJS(jsCode: string): string {\n    let code: string = jsCode;\n    const tempVarStore: any = {\n      js: [],\n      entangle: [],\n    };\n    Object.keys(tempVarStore).forEach((directive) => {\n      code = code.replace(\n        new RegExp(`@${directive}\\\\((?:[^)(]+|\\\\((?:[^)(]+|\\\\([^)(]*\\\\))*\\\\))*\\\\)`, 'gs'),\n        (m: any) => {\n          const index = tempVarStore[directive].push(m) - 1;\n          return this.getPlaceholder(directive, index, m.length);\n        },\n      );\n    });\n    code = beautify.js_beautify(code, { brace_style: 'preserve-inline' });\n\n    Object.keys(tempVarStore).forEach((directive) => {\n      code = code.replace(\n        new RegExp(this.getPlaceholder(directive, '_*(\\\\d+)'), 'gms'),\n        (_match: any, p1: any) => tempVarStore[directive][p1],\n      );\n    });\n\n    return code;\n  }\n}\n", "import { promises as fs } from 'fs';\nimport _ from 'lodash';\nimport * as vscodeOniguruma from 'vscode-oniguruma';\nimport path from 'path';\nimport { readFile } from './util';\n\nexport class VscodeTextmate {\n  oniguruma: any;\n\n  registry: any;\n\n  vsctm: any;\n\n  initCalled: any;\n\n  constructor(vsctm: any, oniguruma: any) {\n    // @ts-ignore\n    return (async () => {\n      this.vsctm = vsctm.default ?? vsctm;\n      // @ts-ignore\n      this.oniguruma = oniguruma || vscodeOniguruma.default || vscodeOniguruma;\n      await this.loadWasm();\n      return this;\n    })();\n  }\n\n  async loadWasm() {\n    const wasm = await fs.readFile(\n      // @ts-ignore\n      // eslint-disable-next-line\n      require.resolve('vscode-oniguruma/release/onig.wasm'),\n    );\n    await this.oniguruma?.loadWASM(wasm.buffer);\n\n    if (!this.initCalled) {\n      try {\n        this.oniguruma.loadWASM(wasm.buffer);\n      } catch (error) {\n        this.initCalled = true;\n      }\n\n      this.initCalled = true;\n    }\n  }\n\n  createRegistry() {\n    this.registry = new this.vsctm.Registry({\n      loadGrammar: (scopeName: any) => {\n        if (scopeName === 'text.html.php.blade') {\n          // https://github.com/onecentlin/\n          // laravel-blade-snippets-vscode/\n          // blob/master/syntaxes/blade.tmLanguage.json\n          return readFile(path.resolve(__dirname, `../syntaxes/blade.tmLanguage.json`)).then((content: any) =>\n            this.vsctm.parseRawGrammar(content.toString(), './blade.tmLanguage.json'),\n          );\n        }\n        return null;\n      },\n      onigLib: Promise.resolve({\n        createOnigScanner: (sources: any) => new this.oniguruma.OnigScanner(sources),\n        createOnigString: (str: any) => new this.oniguruma.OnigString(str),\n      }),\n    });\n\n    return this.registry;\n  }\n\n  tokenizeLines(splitedLines: any, grammar: any) {\n    return _.map(splitedLines, (line: any) => grammar.tokenizeLine(line, this.vsctm?.INITIAL));\n  }\n}\n\nexport default {\n  VscodeTextmate,\n};\n", "/* eslint-disable max-len */\nimport _ from 'lodash';\nimport fs from 'fs';\nimport chalk from 'chalk';\nimport prettier from 'prettier/standalone';\n// @ts-ignore\nimport phpPlugin from '@prettier/plugin-php/standalone';\nimport detectIndent from 'detect-indent';\nimport { indentStartTokens, phpKeywordStartTokens, phpKeywordEndTokens } from './indent';\nimport { nestedParenthesisRegex } from './regex';\n\nexport const optional = (obj: any) => {\n  const chain = {\n    get() {\n      return null;\n    },\n  };\n\n  if (_.isUndefined(obj) || _.isNull(obj)) {\n    return chain;\n  }\n\n  return obj;\n};\n\nexport async function readFile(path: any) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(path, (error: any, data: any) => (error ? reject(error) : resolve(data)));\n  });\n}\n\nexport function splitByLines(content: any) {\n  if (!content) {\n    return '';\n  }\n\n  return content.split(/\\r\\n|\\n|\\r/);\n}\n\nexport function formatStringAsPhp(content: any) {\n  return prettier.format(content.replace(/\\n$/, ''), {\n    parser: 'php',\n    printWidth: 1000,\n    singleQuote: true,\n    // @ts-ignore\n    phpVersion: '8.0',\n    plugins: [phpPlugin],\n  });\n}\n\nexport function formatRawStringAsPhp(content: any, printWidth = 1000, trailingCommaPHP = true) {\n  return prettier\n    .format(`<?php echo ${content} ?>`, {\n      parser: 'php',\n      printWidth,\n      singleQuote: true,\n      // @ts-ignore\n      phpVersion: '8.0',\n      trailingCommaPHP,\n      plugins: [phpPlugin],\n    })\n    .replace(/<\\?php echo (.*)?\\?>/gs, (match: any, p1: any) => p1.trim().replace(/;\\s*$/, ''));\n}\n\nexport function getArgumentsCount(expression: any) {\n  const code = `<?php tmp_func${expression}; ?>`;\n  // @ts-ignore\n  // eslint-disable-next-line no-underscore-dangle\n  const { ast } = prettier.__debug.parse(code, {\n    parser: 'php',\n    phpVersion: '8.0',\n    plugins: [phpPlugin],\n  });\n  try {\n    return ast.children[0].expression.arguments.length || 0;\n  } catch (e) {\n    return 0;\n  }\n}\n\nexport function normalizeIndentLevel(length: any) {\n  if (length < 0) {\n    return 0;\n  }\n\n  return length;\n}\n\nexport function printDiffs(diffs: any) {\n  return Promise.all(\n    _.map(diffs, async (diff: any) => {\n      process.stdout.write(`path: ${chalk.bold(diff.path)}:${diff.line}\\n`);\n      process.stdout.write(chalk.red(`--${diff.original}\\n`));\n      process.stdout.write(chalk.green(`++${diff.formatted}\\n`));\n    }),\n  );\n}\n\nexport function generateDiff(path: any, originalLines: any, formattedLines: any) {\n  const diff = _.map(originalLines, (originalLine: any, index: any) => {\n    if (_.isEmpty(originalLine)) {\n      return null;\n    }\n\n    if (originalLine === formattedLines[index]) {\n      return null;\n    }\n\n    return {\n      path,\n      line: index + 1,\n      original: originalLine,\n      formatted: formattedLines[index],\n    };\n  });\n\n  return _.without(diff, null);\n}\n\nexport async function prettifyPhpContentWithUnescapedTags(content: any) {\n  const directives = _.without(indentStartTokens, '@switch', '@forelse', '@php').join('|');\n\n  const directiveRegexes = new RegExp(\n    // eslint-disable-next-line max-len\n    `(?!\\\\/\\\\*.*?\\\\*\\\\/)(${directives})(\\\\s*?)${nestedParenthesisRegex}`,\n    'gmi',\n  );\n\n  return new Promise((resolve) => resolve(content))\n    .then((res: any) =>\n      _.replace(res, directiveRegexes, (match: any, p1: any, p2: any, p3: any) =>\n        formatStringAsPhp(`<?php ${p1.substr('1')}${p2}(${p3}) ?>`)\n          .replace(\n            /<\\?php\\s(.*?)(\\s*?)\\((.*?)\\);*\\s\\?>\\n/gs,\n            (match2: any, j1: any, j2: any, j3: any) => `@${j1.trim()}${j2}(${j3.trim()})`,\n          )\n          .replace(/([\\n\\s]*)->([\\n\\s]*)/gs, '->'),\n      ),\n    )\n    .then((res) => formatStringAsPhp(res));\n}\n\nexport async function prettifyPhpContentWithEscapedTags(content: any) {\n  return new Promise((resolve) => resolve(content))\n    .then((res: any) => _.replace(res, /{!!/g, '<?php /*escaped*/'))\n    .then((res) => _.replace(res, /!!}/g, '/*escaped*/ ?>\\n'))\n    .then((res) => formatStringAsPhp(res))\n    .then((res) => _.replace(res, /<\\?php\\s\\/\\*escaped\\*\\//g, '{!! '))\n    .then((res) => _.replace(res, /\\/\\*escaped\\*\\/\\s\\?>\\n/g, ' !!}'));\n}\n\nexport async function removeSemicolon(content: any) {\n  return new Promise((resolve) => {\n    resolve(content);\n  })\n    .then((res: any) => _.replace(res, /;[\\n\\s]*!!\\}/g, ' !!}'))\n    .then((res) => _.replace(res, /;[\\s\\n]*!!}/g, ' !!}'))\n    .then((res) => _.replace(res, /;[\\n\\s]*}}/g, ' }}'))\n    .then((res) => _.replace(res, /; }}/g, ' }}'))\n    .then((res) => _.replace(res, /; --}}/g, ' --}}'));\n}\n\nexport async function formatAsPhp(content: any) {\n  return prettifyPhpContentWithUnescapedTags(content);\n}\n\nexport async function preserveOriginalPhpTagInHtml(content: any) {\n  return new Promise((resolve) => resolve(content))\n    .then((res: any) => _.replace(res, /<\\?php/g, '/** phptag_start **/'))\n    .then((res) => _.replace(res, /\\?>/g, '/** end_phptag **/'));\n}\n\nexport function revertOriginalPhpTagInHtml(content: any) {\n  return new Promise((resolve) => resolve(content))\n    .then((res: any) => _.replace(res, /\\/\\*\\*[\\s\\n]*?phptag_start[\\s\\n]*?\\*\\*\\//gs, '<?php'))\n    .then((res) => _.replace(res, /\\/\\*\\*[\\s\\n]*?end_phptag[\\s\\n]*?\\*\\*\\/[\\s];\\n/g, '?>;'))\n    .then((res) => _.replace(res, /\\/\\*\\*[\\s\\n]*?end_phptag[\\s\\n]*?\\*\\*\\//g, '?>'));\n}\n\nexport function indent(content: any, level: any, options: any) {\n  const lines = content.split('\\n');\n  return _.map(lines, (line: any, index: any) => {\n    if (!line.match(/\\w/)) {\n      return line;\n    }\n\n    const ignoreFirstLine = optional(options).ignoreFirstLine || false;\n\n    if (ignoreFirstLine && index === 0) {\n      return line;\n    }\n\n    const originalLineWhitespaces = detectIndent(line).amount;\n    const indentChar = optional(options).useTabs ? '\\t' : ' ';\n    const indentSize = optional(options).indentSize || 4;\n    const whitespaces = originalLineWhitespaces + indentSize * level;\n\n    if (whitespaces < 0) {\n      return line;\n    }\n\n    return indentChar.repeat(whitespaces) + line.trimLeft();\n  }).join('\\n');\n}\n\nexport function unindent(directive: any, content: any, level: any, options: any) {\n  const lines = content.split('\\n');\n  return _.map(lines, (line: any) => {\n    if (!line.match(/\\w/)) {\n      return line;\n    }\n\n    const originalLineWhitespaces = detectIndent(line).amount;\n    const indentChar = optional(options).useTabs ? '\\t' : ' ';\n    const indentSize = optional(options).indentSize || 4;\n    const whitespaces = originalLineWhitespaces - indentSize * level;\n\n    if (whitespaces < 0) {\n      return line;\n    }\n\n    return indentChar.repeat(whitespaces) + line.trimLeft();\n  }).join('\\n');\n}\n\nexport function preserveDirectives(content: any) {\n  const startTokens = _.without(phpKeywordStartTokens, '@case');\n  const endTokens = _.without(phpKeywordEndTokens, '@break');\n\n  return new Promise((resolve) => resolve(content))\n    .then((res: any) => {\n      const regex = new RegExp(`(${startTokens.join('|')})([\\\\s]*?)${nestedParenthesisRegex}`, 'gis');\n      return _.replace(\n        res,\n        regex,\n        (match: any, p1: any, p2: any, p3: any) => `<beautifyTag start=\"${p1}${p2}\" exp=\"^^^${_.escape(p3)}^^^\">`,\n      );\n    })\n    .then((res: any) => {\n      const regex = new RegExp(`(?!end=\".*)(${endTokens.join('|')})(?!.*\")`, 'gi');\n      return _.replace(res, regex, (match: any, p1: any) => `</beautifyTag end=\"${p1}\">`);\n    });\n}\n\nexport function preserveDirectivesInTag(content: any) {\n  return new Promise((resolve) => {\n    const regex = new RegExp(\n      `(<[^>]*?)(${phpKeywordStartTokens.join('|')})([\\\\s]*?)${nestedParenthesisRegex}(.*?)(${phpKeywordEndTokens.join(\n        '|',\n      )})([^>]*?>)`,\n      'gis',\n    );\n    resolve(\n      _.replace(\n        content,\n        regex,\n        (match: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any) =>\n          `${p1}|-- start=\"${p2}${p3}\" exp=\"^^^${p4}^^^\" body=\"^^^${_.escape(_.trim(p5))}^^^\" end=\"${p6}\" --|${p7}`,\n      ),\n    );\n  });\n}\n\nexport function revertDirectives(content: any) {\n  return new Promise((resolve) => resolve(content))\n    .then((res: any) =>\n      _.replace(\n        res,\n        /<beautifyTag.*?start=\"(.*?)\".*?exp=\".*?\\^\\^\\^(.*?)\\^\\^\\^.*?\"\\s*>/gs,\n        (match: any, p1: any, p2: any) => `${p1}(${_.unescape(p2)})`,\n      ),\n    )\n    .then((res) => _.replace(res, /<\\/beautifyTag.*?end=\"(.*?)\"\\s*>/gs, (match: any, p1: any) => `${p1}`));\n}\n\nexport function revertDirectivesInTag(content: any) {\n  return new Promise((resolve) => resolve(content))\n    .then((res: any) =>\n      _.replace(\n        res,\n        /\\|--.*?start=\"(.*?)\".*?exp=\".*?\\^\\^\\^(.*?)\\^\\^\\^.*?\"(.*?)body=\".*?\\^\\^\\^(.*?)\\^\\^\\^.*?\".*?end=\"(.*?)\".*?--\\|/gs,\n        (match: any, p1: any, p2: any, p3: any, p4: any, p5: any) =>\n          `${_.trimStart(p1)}(${p2}) ${_.unescape(p4)} ${p5}`,\n      ),\n    )\n    .then((res) => _.replace(res, /\\/-- end=\"(.*?)\"--\\//gs, (match: any, p1: any) => `${p1}`));\n}\nexport function printDescription() {\n  const returnLine = '\\n\\n';\n  process.stdout.write(returnLine);\n  process.stdout.write(chalk.bold.green('Fixed: F\\n'));\n  process.stdout.write(chalk.bold.red('Errors: E\\n'));\n  process.stdout.write(chalk.bold('Not Changed: ') + chalk.bold.green('.\\n'));\n}\n\nconst escapeTags = [\n  '/\\\\*\\\\* phptag_start \\\\*\\\\*/',\n  '/\\\\*\\\\* end_phptag \\\\*\\\\*/',\n  '/\\\\*escaped\\\\*/',\n  '__BLADE__;',\n  '/\\\\* blade_comment_start \\\\*/',\n  '/\\\\* blade_comment_end \\\\*/',\n  '/\\\\*\\\\*\\\\*script_placeholder\\\\*\\\\*\\\\*/',\n  'beautifyTag',\n  '@customdirective',\n  '@elsecustomdirective',\n  '@endcustomdirective',\n];\n\nexport function checkResult(formatted: any) {\n  if (new RegExp(escapeTags.join('|')).test(formatted)) {\n    throw new Error(\n      [\n        \"Can't format blade: something goes wrong.\",\n        // eslint-disable-next-line max-len\n        'Please check if template is too complicated or not. Or simplify template might solves issue.',\n      ].join('\\n'),\n    );\n  }\n\n  return formatted;\n}\n\nexport function escapeReplacementString(string: string) {\n  return string.replace(/\\$/g, '$$$$');\n}\n\nexport function debugLog(...content: any) {\n  _.each(content, (item) => {\n    console.log('------------------- content start -------------------');\n    console.log(item);\n    console.log('------------------- content end   -------------------');\n  });\n\n  return content;\n}\n", "import _ from 'lodash';\n\nexport const directivePrefix = '@';\n\nexport const indentStartTokens = [\n  '@alert',\n  '@pushonce',\n  '@push',\n  '@slot',\n  '@switch',\n  '@unless',\n  '@verbatim',\n  '@prependonce',\n  '@prepend',\n  '@once',\n  '@error',\n  '@empty',\n  '@guest',\n  '@isset',\n  '@permission',\n  '@permissions',\n  '@canany',\n  '@cannot',\n  '@can',\n  '@role',\n  '@hasrole',\n  '@hasanyrole',\n  '@hasallroles',\n  '@unlessrole',\n  '@hasexactroles',\n  '@if',\n  '@production',\n  '@env',\n  '@while',\n  '@auth',\n  '@forelse',\n  '@for',\n  '@foreach',\n  '@php',\n  '@component',\n  '@section',\n  '@customdirective',\n];\n\nexport const indentStartTokensWithoutPrefix = _.map(indentStartTokens, (token) => token.substring(1));\n\nexport const indentEndTokens = [\n  '@endalert',\n  '@endpushonce',\n  '@endpush',\n  '@endslot',\n  '@endswitch',\n  '@endunless',\n  '@endverbatim',\n  '@show',\n  '@stop',\n  '@endprependonce',\n  '@endprepend',\n  '@endonce',\n  '@enderror',\n  '@append',\n  '@overwrite',\n  '@endempty',\n  '@endguest',\n  '@endisset',\n  '@endpermission',\n  '@endpermissions',\n  '@endcanany',\n  '@endcannot',\n  '@endcan',\n  '@endrole',\n  '@endhasrole',\n  '@endhasanyrole',\n  '@endhasallroles',\n  '@endunlessrole',\n  '@endhasexactroles',\n  '@endif',\n  '@endproduction',\n  '@endenv',\n  '@endwhile',\n  '@endauth',\n  '@endforelse',\n  '@endforeach',\n  '@endfor',\n  '@endphp',\n  '@endcomponent',\n  '@endsection',\n  '@endcustomdirective',\n];\n\nexport const indentElseTokens = [\n  '@elseenv',\n  '@elseif',\n  '@elsecanany',\n  '@elsecannot',\n  '@elsecan',\n  '@else',\n  '@elsecustomdirective',\n];\n\n// Directives which do not need an end token if a parameter is present\nexport const optionalStartWithoutEndTokens = {\n  '@section': 2,\n  '@push': 2,\n  '@prepend': 2,\n  '@slot': 2,\n};\n\nexport const tokenForIndentStartOrElseTokens = ['@forelse', '@if'];\n\nexport const indentStartOrElseTokens = ['@empty'];\n\nexport const indentStartAndEndTokens = ['@default'];\n\nexport const phpKeywordStartTokens = ['@forelse', '@if', '@for', '@foreach', '@while', '@sectionmissing', '@case'];\n\nexport const phpKeywordEndTokens = ['@endforelse', '@endif', '@endforeach', '@endfor', '@endwhile', '@break'];\n\nexport const inlineFunctionTokens = [\n  '@set',\n  '@json',\n  '@selected',\n  '@checked',\n  '@disabled',\n  '@php',\n  '@include',\n  '@includeif',\n  '@includewhen',\n  '@includeunless',\n  '@includefirst',\n  '@button',\n  '@class',\n  '@props',\n  '@aware',\n];\n\nexport const conditionalTokens = [\n  '@if',\n  '@while',\n  '@case',\n  '@isset',\n  '@empty',\n  '@elseif',\n  '@component',\n  '@hassection',\n  '@unless',\n];\n\nexport const unbalancedStartTokens = ['@hassection'];\n\nexport const cssAtRuleTokens = [\n  '@charset',\n  '@color-profile',\n  '@counter-style',\n  '@font-face',\n  '@font-feature-values',\n  '@import',\n  '@keyframes',\n  '@media',\n  '@namespace',\n  '@page',\n  '@property',\n  '@supports',\n];\n\nexport function hasStartAndEndToken(tokenizeLineResult: any, originalLine: any) {\n  return (\n    _.filter(tokenizeLineResult.tokens, (tokenStruct: any) => {\n      const token = originalLine.substring(tokenStruct.startIndex, tokenStruct.endIndex).trim();\n\n      return _.includes(indentStartTokens, token) || _.includes(indentEndTokens, token);\n    }).length >= 2\n  );\n}\n", "// eslint-disable-next-line import/prefer-default-export\nexport const nestedParenthesisRegex = `\\\\(((?:[^)(]+|\\\\((?:[^)(]+|\\\\((?:[^)(]+|\\\\((?:[^)(]+|\\\\([^)(]*\\\\))*\\\\))*\\\\))*\\\\))*)\\\\)`;\n", "import path from 'path';\nimport fs from 'fs';\nimport Ajv, { JSONSchemaType } from 'ajv';\nimport findConfig from 'find-config';\n\nconst ajv = new Ajv();\n\nexport type WrapAttributes =\n  | 'auto'\n  | 'force'\n  | 'force-aligned'\n  | 'force-expand-multiline'\n  | 'aligned-multiple'\n  | 'preserve'\n  | 'preserve-aligned';\n\nexport interface RuntimeConfig {\n  indentSize?: number;\n  wrapLineLength?: number;\n  wrapAttributes?: WrapAttributes;\n  endWithNewline?: boolean;\n  useTabs?: boolean;\n}\n\nconst defaultConfigNames = ['.bladeformatterrc.json', '.bladeformatterrc'];\n\nexport function findRuntimeConfig(filePath: string): string | null {\n  for (let i = 0; i < defaultConfigNames.length; i += 1) {\n    const result: string | null = findConfig(defaultConfigNames[i], {\n      cwd: path.dirname(filePath),\n      home: false,\n    });\n\n    if (result) {\n      return result;\n    }\n  }\n\n  return null;\n}\n\nexport async function readRuntimeConfig(filePath: string | null): Promise<RuntimeConfig | undefined> {\n  if (filePath === null) {\n    return undefined;\n  }\n\n  const options = JSON.parse((await fs.promises.readFile(filePath)).toString());\n\n  const schema: JSONSchemaType<RuntimeConfig> = {\n    type: 'object',\n    properties: {\n      indentSize: { type: 'integer', nullable: true },\n      wrapLineLength: { type: 'integer', nullable: true },\n      wrapAttributes: {\n        type: 'string',\n        enum: [\n          'auto',\n          'force',\n          'force-aligned',\n          'force-expand-multiline',\n          'aligned-multiple',\n          'preserve',\n          'preserve-aligned',\n        ],\n        nullable: true,\n      },\n      endWithNewline: { type: 'boolean', nullable: true },\n      useTabs: { type: 'boolean', nullable: true },\n    },\n    additionalProperties: true,\n  };\n  const validate = ajv.compile(schema);\n\n  if (!validate(options)) {\n    throw validate;\n  }\n\n  return options;\n}\n", "export default class FormatError extends Error {}\n"],
  "mappings": "usBAAA,yCAAkB,oBAClB,GAAmB,4BACnB,GAAyB,4BAEzB,GAA+B,cAE/B,GAAwB,yBCNxB,OAAmB,qBAEnB,EAAqB,mBACrB,EAAe,iBACf,EAAoB,sBACpB,EAAkB,oBAClB,GAAiB,mBACjB,GAAqB,mBACrB,EAAc,qBACd,GAAuB,0BCPvB,OAAe,iBACf,EAA4C,0BAC5C,EAAc,qBACd,GAAgC,8BAChC,EAAyB,4BACzB,GAAkB,oBAClB,GAAoB,sBACpB,GAA4B,2CCT5B,OAA+B,cAC/B,GAAc,qBACd,EAAiC,+BACjC,GAAiB,mBCFjB,MAAc,qBACd,GAAe,iBACf,EAAkB,oBAClB,EAAqB,kCAErB,EAAsB,8CACtB,GAAyB,4BCPzB,MAAc,qBAED,EAAkB,IAElB,EAAoB,CAC/B,SACA,YACA,QACA,QACA,UACA,UACA,YACA,eACA,WACA,QACA,SACA,SACA,SACA,SACA,cACA,eACA,UACA,UACA,OACA,QACA,WACA,cACA,eACA,cACA,iBACA,MACA,cACA,OACA,SACA,QACA,WACA,OACA,WACA,OACA,aACA,WACA,oBAGW,GAAiC,UAAE,IAAI,EAAmB,AAAC,GAAU,EAAM,UAAU,IAErF,EAAkB,CAC7B,YACA,eACA,WACA,WACA,aACA,aACA,eACA,QACA,QACA,kBACA,cACA,WACA,YACA,UACA,aACA,YACA,YACA,YACA,iBACA,kBACA,aACA,aACA,UACA,WACA,cACA,iBACA,kBACA,iBACA,oBACA,SACA,iBACA,UACA,YACA,WACA,cACA,cACA,UACA,UACA,gBACA,cACA,uBAGW,EAAmB,CAC9B,WACA,UACA,cACA,cACA,WACA,QACA,wBAIW,EAAgC,CAC3C,WAAY,EACZ,QAAS,EACT,WAAY,EACZ,QAAS,GAGE,GAAkC,CAAC,WAAY,OAE/C,EAA0B,CAAC,UAE3B,GAA0B,CAAC,YAE3B,EAAwB,CAAC,WAAY,MAAO,OAAQ,WAAY,SAAU,kBAAmB,SAE7F,EAAsB,CAAC,cAAe,SAAU,cAAe,UAAW,YAAa,UAEvF,EAAuB,CAClC,OACA,QACA,YACA,WACA,YACA,OACA,WACA,a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",
  "names": []
}
